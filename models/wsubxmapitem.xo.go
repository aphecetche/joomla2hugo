// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// WsubXmapItem represents a row from 'jlabo.wsub_xmap_items'.
type WsubXmapItem struct {
	UID        string         `json:"uid"`        // uid
	Itemid     int            `json:"itemid"`     // itemid
	View       string         `json:"view"`       // view
	SitemapID  int            `json:"sitemap_id"` // sitemap_id
	Properties sql.NullString `json:"properties"` // properties

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubXmapItem exists in the database.
func (wxi *WsubXmapItem) Exists() bool {
	return wxi._exists
}

// Deleted provides information if the WsubXmapItem has been deleted from the database.
func (wxi *WsubXmapItem) Deleted() bool {
	return wxi._deleted
}

// Insert inserts the WsubXmapItem to the database.
func (wxi *WsubXmapItem) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wxi._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO jlabo.wsub_xmap_items (` +
		`uid, itemid, view, sitemap_id, properties` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wxi.UID, wxi.Itemid, wxi.View, wxi.SitemapID, wxi.Properties)
	_, err = db.Exec(sqlstr, wxi.UID, wxi.Itemid, wxi.View, wxi.SitemapID, wxi.Properties)
	if err != nil {
		return err
	}

	// set existence
	wxi._exists = true

	return nil
}

// Update updates the WsubXmapItem in the database.
func (wxi *WsubXmapItem) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wxi._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wxi._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE jlabo.wsub_xmap_items SET ` +
		`properties = ?` +
		` WHERE uid = ? AND itemid = ? AND view = ? AND sitemap_id = ?`

	// run query
	XOLog(sqlstr, wxi.Properties, wxi.UID, wxi.Itemid, wxi.View, wxi.SitemapID)
	_, err = db.Exec(sqlstr, wxi.Properties, wxi.UID, wxi.Itemid, wxi.View, wxi.SitemapID)
	return err
}

// Save saves the WsubXmapItem to the database.
func (wxi *WsubXmapItem) Save(db XODB) error {
	if wxi.Exists() {
		return wxi.Update(db)
	}

	return wxi.Insert(db)
}

// Delete deletes the WsubXmapItem from the database.
func (wxi *WsubXmapItem) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wxi._exists {
		return nil
	}

	// if deleted, bail
	if wxi._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM jlabo.wsub_xmap_items WHERE uid = ? AND itemid = ? AND view = ? AND sitemap_id = ?`

	// run query
	XOLog(sqlstr, wxi.UID, wxi.Itemid, wxi.View, wxi.SitemapID)
	_, err = db.Exec(sqlstr, wxi.UID, wxi.Itemid, wxi.View, wxi.SitemapID)
	if err != nil {
		return err
	}

	// set deleted
	wxi._deleted = true

	return nil
}

// WsubXmapItemsByUIDItemid retrieves a row from 'jlabo.wsub_xmap_items' as a WsubXmapItem.
//
// Generated from index 'uid'.
func WsubXmapItemsByUIDItemid(db XODB, uid string, itemid int) ([]*WsubXmapItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`uid, itemid, view, sitemap_id, properties ` +
		`FROM jlabo.wsub_xmap_items ` +
		`WHERE uid = ? AND itemid = ?`

	// run query
	XOLog(sqlstr, uid, itemid)
	q, err := db.Query(sqlstr, uid, itemid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubXmapItem{}
	for q.Next() {
		wxi := WsubXmapItem{
			_exists: true,
		}

		// scan
		err = q.Scan(&wxi.UID, &wxi.Itemid, &wxi.View, &wxi.SitemapID, &wxi.Properties)
		if err != nil {
			return nil, err
		}

		res = append(res, &wxi)
	}

	return res, nil
}

// WsubXmapItemsByView retrieves a row from 'jlabo.wsub_xmap_items' as a WsubXmapItem.
//
// Generated from index 'view'.
func WsubXmapItemsByView(db XODB, view string) ([]*WsubXmapItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`uid, itemid, view, sitemap_id, properties ` +
		`FROM jlabo.wsub_xmap_items ` +
		`WHERE view = ?`

	// run query
	XOLog(sqlstr, view)
	q, err := db.Query(sqlstr, view)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubXmapItem{}
	for q.Next() {
		wxi := WsubXmapItem{
			_exists: true,
		}

		// scan
		err = q.Scan(&wxi.UID, &wxi.Itemid, &wxi.View, &wxi.SitemapID, &wxi.Properties)
		if err != nil {
			return nil, err
		}

		res = append(res, &wxi)
	}

	return res, nil
}

// WsubXmapItemBySitemapID retrieves a row from 'jlabo.wsub_xmap_items' as a WsubXmapItem.
//
// Generated from index 'wsub_xmap_items_sitemap_id_pkey'.
func WsubXmapItemBySitemapID(db XODB, sitemapID int) (*WsubXmapItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`uid, itemid, view, sitemap_id, properties ` +
		`FROM jlabo.wsub_xmap_items ` +
		`WHERE sitemap_id = ?`

	// run query
	XOLog(sqlstr, sitemapID)
	wxi := WsubXmapItem{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, sitemapID).Scan(&wxi.UID, &wxi.Itemid, &wxi.View, &wxi.SitemapID, &wxi.Properties)
	if err != nil {
		return nil, err
	}

	return &wxi, nil
}
