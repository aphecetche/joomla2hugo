// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// WsubFinderTaxonomyMap represents a row from 'jlabo.wsub_finder_taxonomy_map'.
type WsubFinderTaxonomyMap struct {
	LinkID uint `json:"link_id"` // link_id
	NodeID uint `json:"node_id"` // node_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubFinderTaxonomyMap exists in the database.
func (wftm *WsubFinderTaxonomyMap) Exists() bool {
	return wftm._exists
}

// Deleted provides information if the WsubFinderTaxonomyMap has been deleted from the database.
func (wftm *WsubFinderTaxonomyMap) Deleted() bool {
	return wftm._deleted
}

// Insert inserts the WsubFinderTaxonomyMap to the database.
func (wftm *WsubFinderTaxonomyMap) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wftm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO jlabo.wsub_finder_taxonomy_map (` +
		`link_id, node_id` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wftm.LinkID, wftm.NodeID)
	_, err = db.Exec(sqlstr, wftm.LinkID, wftm.NodeID)
	if err != nil {
		return err
	}

	// set existence
	wftm._exists = true

	return nil
}

// Update statements omitted due to lack of fields other than primary key

// Delete deletes the WsubFinderTaxonomyMap from the database.
func (wftm *WsubFinderTaxonomyMap) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wftm._exists {
		return nil
	}

	// if deleted, bail
	if wftm._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM jlabo.wsub_finder_taxonomy_map WHERE link_id = ? AND node_id = ?`

	// run query
	XOLog(sqlstr, wftm.LinkID, wftm.NodeID)
	_, err = db.Exec(sqlstr, wftm.LinkID, wftm.NodeID)
	if err != nil {
		return err
	}

	// set deleted
	wftm._deleted = true

	return nil
}

// WsubFinderTaxonomyMapsByLinkID retrieves a row from 'jlabo.wsub_finder_taxonomy_map' as a WsubFinderTaxonomyMap.
//
// Generated from index 'link_id'.
func WsubFinderTaxonomyMapsByLinkID(db XODB, linkID uint) ([]*WsubFinderTaxonomyMap, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`link_id, node_id ` +
		`FROM jlabo.wsub_finder_taxonomy_map ` +
		`WHERE link_id = ?`

	// run query
	XOLog(sqlstr, linkID)
	q, err := db.Query(sqlstr, linkID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubFinderTaxonomyMap{}
	for q.Next() {
		wftm := WsubFinderTaxonomyMap{
			_exists: true,
		}

		// scan
		err = q.Scan(&wftm.LinkID, &wftm.NodeID)
		if err != nil {
			return nil, err
		}

		res = append(res, &wftm)
	}

	return res, nil
}

// WsubFinderTaxonomyMapsByNodeID retrieves a row from 'jlabo.wsub_finder_taxonomy_map' as a WsubFinderTaxonomyMap.
//
// Generated from index 'node_id'.
func WsubFinderTaxonomyMapsByNodeID(db XODB, nodeID uint) ([]*WsubFinderTaxonomyMap, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`link_id, node_id ` +
		`FROM jlabo.wsub_finder_taxonomy_map ` +
		`WHERE node_id = ?`

	// run query
	XOLog(sqlstr, nodeID)
	q, err := db.Query(sqlstr, nodeID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubFinderTaxonomyMap{}
	for q.Next() {
		wftm := WsubFinderTaxonomyMap{
			_exists: true,
		}

		// scan
		err = q.Scan(&wftm.LinkID, &wftm.NodeID)
		if err != nil {
			return nil, err
		}

		res = append(res, &wftm)
	}

	return res, nil
}

// WsubFinderTaxonomyMapByNodeID retrieves a row from 'jlabo.wsub_finder_taxonomy_map' as a WsubFinderTaxonomyMap.
//
// Generated from index 'wsub_finder_taxonomy_map_node_id_pkey'.
func WsubFinderTaxonomyMapByNodeID(db XODB, nodeID uint) (*WsubFinderTaxonomyMap, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`link_id, node_id ` +
		`FROM jlabo.wsub_finder_taxonomy_map ` +
		`WHERE node_id = ?`

	// run query
	XOLog(sqlstr, nodeID)
	wftm := WsubFinderTaxonomyMap{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, nodeID).Scan(&wftm.LinkID, &wftm.NodeID)
	if err != nil {
		return nil, err
	}

	return &wftm, nil
}
