// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

// WsubFinderTokensAggregate represents a row from 'jlabo.wsub_finder_tokens_aggregate'.
type WsubFinderTokensAggregate struct {
	TermID        uint    `json:"term_id"`        // term_id
	MapSuffix     string  `json:"map_suffix"`     // map_suffix
	Term          string  `json:"term"`           // term
	Stem          string  `json:"stem"`           // stem
	Common        bool    `json:"common"`         // common
	Phrase        bool    `json:"phrase"`         // phrase
	TermWeight    float32 `json:"term_weight"`    // term_weight
	Context       bool    `json:"context"`        // context
	ContextWeight float32 `json:"context_weight"` // context_weight
	TotalWeight   float32 `json:"total_weight"`   // total_weight
	Language      string  `json:"language"`       // language
}

// WsubFinderTokensAggregatesByTermID retrieves a row from 'jlabo.wsub_finder_tokens_aggregate' as a WsubFinderTokensAggregate.
//
// Generated from index 'keyword_id'.
func WsubFinderTokensAggregatesByTermID(db XODB, termID uint) ([]*WsubFinderTokensAggregate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`term_id, map_suffix, term, stem, common, phrase, term_weight, context, context_weight, total_weight, language ` +
		`FROM jlabo.wsub_finder_tokens_aggregate ` +
		`WHERE term_id = ?`

	// run query
	XOLog(sqlstr, termID)
	q, err := db.Query(sqlstr, termID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubFinderTokensAggregate{}
	for q.Next() {
		wfta := WsubFinderTokensAggregate{}

		// scan
		err = q.Scan(&wfta.TermID, &wfta.MapSuffix, &wfta.Term, &wfta.Stem, &wfta.Common, &wfta.Phrase, &wfta.TermWeight, &wfta.Context, &wfta.ContextWeight, &wfta.TotalWeight, &wfta.Language)
		if err != nil {
			return nil, err
		}

		res = append(res, &wfta)
	}

	return res, nil
}

// WsubFinderTokensAggregatesByTerm retrieves a row from 'jlabo.wsub_finder_tokens_aggregate' as a WsubFinderTokensAggregate.
//
// Generated from index 'token'.
func WsubFinderTokensAggregatesByTerm(db XODB, term string) ([]*WsubFinderTokensAggregate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`term_id, map_suffix, term, stem, common, phrase, term_weight, context, context_weight, total_weight, language ` +
		`FROM jlabo.wsub_finder_tokens_aggregate ` +
		`WHERE term = ?`

	// run query
	XOLog(sqlstr, term)
	q, err := db.Query(sqlstr, term)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubFinderTokensAggregate{}
	for q.Next() {
		wfta := WsubFinderTokensAggregate{}

		// scan
		err = q.Scan(&wfta.TermID, &wfta.MapSuffix, &wfta.Term, &wfta.Stem, &wfta.Common, &wfta.Phrase, &wfta.TermWeight, &wfta.Context, &wfta.ContextWeight, &wfta.TotalWeight, &wfta.Language)
		if err != nil {
			return nil, err
		}

		res = append(res, &wfta)
	}

	return res, nil
}
