// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// WsubMenuType represents a row from 'jlabo.wsub_menu_types'.
type WsubMenuType struct {
	ID          uint   `json:"id"`          // id
	Menutype    string `json:"menutype"`    // menutype
	Title       string `json:"title"`       // title
	Description string `json:"description"` // description

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubMenuType exists in the database.
func (wmt *WsubMenuType) Exists() bool {
	return wmt._exists
}

// Deleted provides information if the WsubMenuType has been deleted from the database.
func (wmt *WsubMenuType) Deleted() bool {
	return wmt._deleted
}

// Insert inserts the WsubMenuType to the database.
func (wmt *WsubMenuType) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wmt._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO jlabo.wsub_menu_types (` +
		`menutype, title, description` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wmt.Menutype, wmt.Title, wmt.Description)
	res, err := db.Exec(sqlstr, wmt.Menutype, wmt.Title, wmt.Description)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	wmt.ID = uint(id)
	wmt._exists = true

	return nil
}

// Update updates the WsubMenuType in the database.
func (wmt *WsubMenuType) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wmt._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wmt._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE jlabo.wsub_menu_types SET ` +
		`menutype = ?, title = ?, description = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, wmt.Menutype, wmt.Title, wmt.Description, wmt.ID)
	_, err = db.Exec(sqlstr, wmt.Menutype, wmt.Title, wmt.Description, wmt.ID)
	return err
}

// Save saves the WsubMenuType to the database.
func (wmt *WsubMenuType) Save(db XODB) error {
	if wmt.Exists() {
		return wmt.Update(db)
	}

	return wmt.Insert(db)
}

// Delete deletes the WsubMenuType from the database.
func (wmt *WsubMenuType) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wmt._exists {
		return nil
	}

	// if deleted, bail
	if wmt._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM jlabo.wsub_menu_types WHERE id = ?`

	// run query
	XOLog(sqlstr, wmt.ID)
	_, err = db.Exec(sqlstr, wmt.ID)
	if err != nil {
		return err
	}

	// set deleted
	wmt._deleted = true

	return nil
}

// WsubMenuTypeByMenutype retrieves a row from 'jlabo.wsub_menu_types' as a WsubMenuType.
//
// Generated from index 'idx_menutype'.
func WsubMenuTypeByMenutype(db XODB, menutype string) (*WsubMenuType, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, menutype, title, description ` +
		`FROM jlabo.wsub_menu_types ` +
		`WHERE menutype = ?`

	// run query
	XOLog(sqlstr, menutype)
	wmt := WsubMenuType{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, menutype).Scan(&wmt.ID, &wmt.Menutype, &wmt.Title, &wmt.Description)
	if err != nil {
		return nil, err
	}

	return &wmt, nil
}

// WsubMenuTypeByID retrieves a row from 'jlabo.wsub_menu_types' as a WsubMenuType.
//
// Generated from index 'wsub_menu_types_id_pkey'.
func WsubMenuTypeByID(db XODB, id uint) (*WsubMenuType, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, menutype, title, description ` +
		`FROM jlabo.wsub_menu_types ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	wmt := WsubMenuType{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&wmt.ID, &wmt.Menutype, &wmt.Title, &wmt.Description)
	if err != nil {
		return nil, err
	}

	return &wmt, nil
}
