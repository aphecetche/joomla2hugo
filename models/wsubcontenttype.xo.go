// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// WsubContentType represents a row from 'jlabo.wsub_content_types'.
type WsubContentType struct {
	TypeID                uint   `json:"type_id"`                 // type_id
	TypeTitle             string `json:"type_title"`              // type_title
	TypeAlias             string `json:"type_alias"`              // type_alias
	Table                 string `json:"table"`                   // table
	Rules                 string `json:"rules"`                   // rules
	FieldMappings         string `json:"field_mappings"`          // field_mappings
	Router                string `json:"router"`                  // router
	ContentHistoryOptions string `json:"content_history_options"` // content_history_options

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubContentType exists in the database.
func (wct *WsubContentType) Exists() bool {
	return wct._exists
}

// Deleted provides information if the WsubContentType has been deleted from the database.
func (wct *WsubContentType) Deleted() bool {
	return wct._deleted
}

// Insert inserts the WsubContentType to the database.
func (wct *WsubContentType) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wct._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO jlabo.wsub_content_types (` +
		`type_title, type_alias, table, rules, field_mappings, router, content_history_options` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wct.TypeTitle, wct.TypeAlias, wct.Table, wct.Rules, wct.FieldMappings, wct.Router, wct.ContentHistoryOptions)
	res, err := db.Exec(sqlstr, wct.TypeTitle, wct.TypeAlias, wct.Table, wct.Rules, wct.FieldMappings, wct.Router, wct.ContentHistoryOptions)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	wct.TypeID = uint(id)
	wct._exists = true

	return nil
}

// Update updates the WsubContentType in the database.
func (wct *WsubContentType) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wct._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wct._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE jlabo.wsub_content_types SET ` +
		`type_title = ?, type_alias = ?, table = ?, rules = ?, field_mappings = ?, router = ?, content_history_options = ?` +
		` WHERE type_id = ?`

	// run query
	XOLog(sqlstr, wct.TypeTitle, wct.TypeAlias, wct.Table, wct.Rules, wct.FieldMappings, wct.Router, wct.ContentHistoryOptions, wct.TypeID)
	_, err = db.Exec(sqlstr, wct.TypeTitle, wct.TypeAlias, wct.Table, wct.Rules, wct.FieldMappings, wct.Router, wct.ContentHistoryOptions, wct.TypeID)
	return err
}

// Save saves the WsubContentType to the database.
func (wct *WsubContentType) Save(db XODB) error {
	if wct.Exists() {
		return wct.Update(db)
	}

	return wct.Insert(db)
}

// Delete deletes the WsubContentType from the database.
func (wct *WsubContentType) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wct._exists {
		return nil
	}

	// if deleted, bail
	if wct._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM jlabo.wsub_content_types WHERE type_id = ?`

	// run query
	XOLog(sqlstr, wct.TypeID)
	_, err = db.Exec(sqlstr, wct.TypeID)
	if err != nil {
		return err
	}

	// set deleted
	wct._deleted = true

	return nil
}

// WsubContentTypesByTypeAlias retrieves a row from 'jlabo.wsub_content_types' as a WsubContentType.
//
// Generated from index 'idx_alias'.
func WsubContentTypesByTypeAlias(db XODB, typeAlias string) ([]*WsubContentType, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`type_id, type_title, type_alias, table, rules, field_mappings, router, content_history_options ` +
		`FROM jlabo.wsub_content_types ` +
		`WHERE type_alias = ?`

	// run query
	XOLog(sqlstr, typeAlias)
	q, err := db.Query(sqlstr, typeAlias)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubContentType{}
	for q.Next() {
		wct := WsubContentType{
			_exists: true,
		}

		// scan
		err = q.Scan(&wct.TypeID, &wct.TypeTitle, &wct.TypeAlias, &wct.Table, &wct.Rules, &wct.FieldMappings, &wct.Router, &wct.ContentHistoryOptions)
		if err != nil {
			return nil, err
		}

		res = append(res, &wct)
	}

	return res, nil
}

// WsubContentTypeByTypeID retrieves a row from 'jlabo.wsub_content_types' as a WsubContentType.
//
// Generated from index 'wsub_content_types_type_id_pkey'.
func WsubContentTypeByTypeID(db XODB, typeID uint) (*WsubContentType, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`type_id, type_title, type_alias, table, rules, field_mappings, router, content_history_options ` +
		`FROM jlabo.wsub_content_types ` +
		`WHERE type_id = ?`

	// run query
	XOLog(sqlstr, typeID)
	wct := WsubContentType{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, typeID).Scan(&wct.TypeID, &wct.TypeTitle, &wct.TypeAlias, &wct.Table, &wct.Rules, &wct.FieldMappings, &wct.Router, &wct.ContentHistoryOptions)
	if err != nil {
		return nil, err
	}

	return &wct, nil
}
