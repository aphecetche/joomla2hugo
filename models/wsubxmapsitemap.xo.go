// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// WsubXmapSitemap represents a row from 'jlabo.wsub_xmap_sitemap'.
type WsubXmapSitemap struct {
	ID            int            `json:"id"`             // id
	Title         sql.NullString `json:"title"`          // title
	Alias         sql.NullString `json:"alias"`          // alias
	Introtext     sql.NullString `json:"introtext"`      // introtext
	Metadesc      sql.NullString `json:"metadesc"`       // metadesc
	Metakey       sql.NullString `json:"metakey"`        // metakey
	Attribs       sql.NullString `json:"attribs"`        // attribs
	Selections    sql.NullString `json:"selections"`     // selections
	ExcludedItems sql.NullString `json:"excluded_items"` // excluded_items
	IsDefault     sql.NullInt64  `json:"is_default"`     // is_default
	State         sql.NullInt64  `json:"state"`          // state
	Access        sql.NullInt64  `json:"access"`         // access
	Created       time.Time      `json:"created"`        // created
	CountXML      sql.NullInt64  `json:"count_xml"`      // count_xml
	CountHTML     sql.NullInt64  `json:"count_html"`     // count_html
	ViewsXML      sql.NullInt64  `json:"views_xml"`      // views_xml
	ViewsHTML     sql.NullInt64  `json:"views_html"`     // views_html
	LastvisitXML  sql.NullInt64  `json:"lastvisit_xml"`  // lastvisit_xml
	LastvisitHTML sql.NullInt64  `json:"lastvisit_html"` // lastvisit_html

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubXmapSitemap exists in the database.
func (wxs *WsubXmapSitemap) Exists() bool {
	return wxs._exists
}

// Deleted provides information if the WsubXmapSitemap has been deleted from the database.
func (wxs *WsubXmapSitemap) Deleted() bool {
	return wxs._deleted
}

// Insert inserts the WsubXmapSitemap to the database.
func (wxs *WsubXmapSitemap) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wxs._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO jlabo.wsub_xmap_sitemap (` +
		`title, alias, introtext, metadesc, metakey, attribs, selections, excluded_items, is_default, state, access, created, count_xml, count_html, views_xml, views_html, lastvisit_xml, lastvisit_html` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wxs.Title, wxs.Alias, wxs.Introtext, wxs.Metadesc, wxs.Metakey, wxs.Attribs, wxs.Selections, wxs.ExcludedItems, wxs.IsDefault, wxs.State, wxs.Access, wxs.Created, wxs.CountXML, wxs.CountHTML, wxs.ViewsXML, wxs.ViewsHTML, wxs.LastvisitXML, wxs.LastvisitHTML)
	res, err := db.Exec(sqlstr, wxs.Title, wxs.Alias, wxs.Introtext, wxs.Metadesc, wxs.Metakey, wxs.Attribs, wxs.Selections, wxs.ExcludedItems, wxs.IsDefault, wxs.State, wxs.Access, wxs.Created, wxs.CountXML, wxs.CountHTML, wxs.ViewsXML, wxs.ViewsHTML, wxs.LastvisitXML, wxs.LastvisitHTML)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	wxs.ID = int(id)
	wxs._exists = true

	return nil
}

// Update updates the WsubXmapSitemap in the database.
func (wxs *WsubXmapSitemap) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wxs._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wxs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE jlabo.wsub_xmap_sitemap SET ` +
		`title = ?, alias = ?, introtext = ?, metadesc = ?, metakey = ?, attribs = ?, selections = ?, excluded_items = ?, is_default = ?, state = ?, access = ?, created = ?, count_xml = ?, count_html = ?, views_xml = ?, views_html = ?, lastvisit_xml = ?, lastvisit_html = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, wxs.Title, wxs.Alias, wxs.Introtext, wxs.Metadesc, wxs.Metakey, wxs.Attribs, wxs.Selections, wxs.ExcludedItems, wxs.IsDefault, wxs.State, wxs.Access, wxs.Created, wxs.CountXML, wxs.CountHTML, wxs.ViewsXML, wxs.ViewsHTML, wxs.LastvisitXML, wxs.LastvisitHTML, wxs.ID)
	_, err = db.Exec(sqlstr, wxs.Title, wxs.Alias, wxs.Introtext, wxs.Metadesc, wxs.Metakey, wxs.Attribs, wxs.Selections, wxs.ExcludedItems, wxs.IsDefault, wxs.State, wxs.Access, wxs.Created, wxs.CountXML, wxs.CountHTML, wxs.ViewsXML, wxs.ViewsHTML, wxs.LastvisitXML, wxs.LastvisitHTML, wxs.ID)
	return err
}

// Save saves the WsubXmapSitemap to the database.
func (wxs *WsubXmapSitemap) Save(db XODB) error {
	if wxs.Exists() {
		return wxs.Update(db)
	}

	return wxs.Insert(db)
}

// Delete deletes the WsubXmapSitemap from the database.
func (wxs *WsubXmapSitemap) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wxs._exists {
		return nil
	}

	// if deleted, bail
	if wxs._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM jlabo.wsub_xmap_sitemap WHERE id = ?`

	// run query
	XOLog(sqlstr, wxs.ID)
	_, err = db.Exec(sqlstr, wxs.ID)
	if err != nil {
		return err
	}

	// set deleted
	wxs._deleted = true

	return nil
}

// WsubXmapSitemapByID retrieves a row from 'jlabo.wsub_xmap_sitemap' as a WsubXmapSitemap.
//
// Generated from index 'wsub_xmap_sitemap_id_pkey'.
func WsubXmapSitemapByID(db XODB, id int) (*WsubXmapSitemap, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, title, alias, introtext, metadesc, metakey, attribs, selections, excluded_items, is_default, state, access, created, count_xml, count_html, views_xml, views_html, lastvisit_xml, lastvisit_html ` +
		`FROM jlabo.wsub_xmap_sitemap ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	wxs := WsubXmapSitemap{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&wxs.ID, &wxs.Title, &wxs.Alias, &wxs.Introtext, &wxs.Metadesc, &wxs.Metakey, &wxs.Attribs, &wxs.Selections, &wxs.ExcludedItems, &wxs.IsDefault, &wxs.State, &wxs.Access, &wxs.Created, &wxs.CountXML, &wxs.CountHTML, &wxs.ViewsXML, &wxs.ViewsHTML, &wxs.LastvisitXML, &wxs.LastvisitHTML)
	if err != nil {
		return nil, err
	}

	return &wxs, nil
}
