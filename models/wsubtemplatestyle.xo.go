// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// WsubTemplateStyle represents a row from 'jlabo.wsub_template_styles'.
type WsubTemplateStyle struct {
	ID       uint   `json:"id"`        // id
	Template string `json:"template"`  // template
	ClientID bool   `json:"client_id"` // client_id
	Home     string `json:"home"`      // home
	Title    string `json:"title"`     // title
	Params   string `json:"params"`    // params

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubTemplateStyle exists in the database.
func (wts *WsubTemplateStyle) Exists() bool {
	return wts._exists
}

// Deleted provides information if the WsubTemplateStyle has been deleted from the database.
func (wts *WsubTemplateStyle) Deleted() bool {
	return wts._deleted
}

// Insert inserts the WsubTemplateStyle to the database.
func (wts *WsubTemplateStyle) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wts._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO jlabo.wsub_template_styles (` +
		`template, client_id, home, title, params` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wts.Template, wts.ClientID, wts.Home, wts.Title, wts.Params)
	res, err := db.Exec(sqlstr, wts.Template, wts.ClientID, wts.Home, wts.Title, wts.Params)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	wts.ID = uint(id)
	wts._exists = true

	return nil
}

// Update updates the WsubTemplateStyle in the database.
func (wts *WsubTemplateStyle) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wts._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wts._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE jlabo.wsub_template_styles SET ` +
		`template = ?, client_id = ?, home = ?, title = ?, params = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, wts.Template, wts.ClientID, wts.Home, wts.Title, wts.Params, wts.ID)
	_, err = db.Exec(sqlstr, wts.Template, wts.ClientID, wts.Home, wts.Title, wts.Params, wts.ID)
	return err
}

// Save saves the WsubTemplateStyle to the database.
func (wts *WsubTemplateStyle) Save(db XODB) error {
	if wts.Exists() {
		return wts.Update(db)
	}

	return wts.Insert(db)
}

// Delete deletes the WsubTemplateStyle from the database.
func (wts *WsubTemplateStyle) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wts._exists {
		return nil
	}

	// if deleted, bail
	if wts._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM jlabo.wsub_template_styles WHERE id = ?`

	// run query
	XOLog(sqlstr, wts.ID)
	_, err = db.Exec(sqlstr, wts.ID)
	if err != nil {
		return err
	}

	// set deleted
	wts._deleted = true

	return nil
}

// WsubTemplateStylesByHome retrieves a row from 'jlabo.wsub_template_styles' as a WsubTemplateStyle.
//
// Generated from index 'idx_home'.
func WsubTemplateStylesByHome(db XODB, home string) ([]*WsubTemplateStyle, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, template, client_id, home, title, params ` +
		`FROM jlabo.wsub_template_styles ` +
		`WHERE home = ?`

	// run query
	XOLog(sqlstr, home)
	q, err := db.Query(sqlstr, home)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubTemplateStyle{}
	for q.Next() {
		wts := WsubTemplateStyle{
			_exists: true,
		}

		// scan
		err = q.Scan(&wts.ID, &wts.Template, &wts.ClientID, &wts.Home, &wts.Title, &wts.Params)
		if err != nil {
			return nil, err
		}

		res = append(res, &wts)
	}

	return res, nil
}

// WsubTemplateStylesByTemplate retrieves a row from 'jlabo.wsub_template_styles' as a WsubTemplateStyle.
//
// Generated from index 'idx_template'.
func WsubTemplateStylesByTemplate(db XODB, template string) ([]*WsubTemplateStyle, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, template, client_id, home, title, params ` +
		`FROM jlabo.wsub_template_styles ` +
		`WHERE template = ?`

	// run query
	XOLog(sqlstr, template)
	q, err := db.Query(sqlstr, template)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubTemplateStyle{}
	for q.Next() {
		wts := WsubTemplateStyle{
			_exists: true,
		}

		// scan
		err = q.Scan(&wts.ID, &wts.Template, &wts.ClientID, &wts.Home, &wts.Title, &wts.Params)
		if err != nil {
			return nil, err
		}

		res = append(res, &wts)
	}

	return res, nil
}

// WsubTemplateStyleByID retrieves a row from 'jlabo.wsub_template_styles' as a WsubTemplateStyle.
//
// Generated from index 'wsub_template_styles_id_pkey'.
func WsubTemplateStyleByID(db XODB, id uint) (*WsubTemplateStyle, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, template, client_id, home, title, params ` +
		`FROM jlabo.wsub_template_styles ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	wts := WsubTemplateStyle{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&wts.ID, &wts.Template, &wts.ClientID, &wts.Home, &wts.Title, &wts.Params)
	if err != nil {
		return nil, err
	}

	return &wts, nil
}
