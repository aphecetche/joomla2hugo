// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// WsubUserKey represents a row from 'jlabo.wsub_user_keys'.
type WsubUserKey struct {
	ID       uint   `json:"id"`       // id
	UserID   string `json:"user_id"`  // user_id
	Token    string `json:"token"`    // token
	Series   string `json:"series"`   // series
	Invalid  int8   `json:"invalid"`  // invalid
	Time     string `json:"time"`     // time
	Uastring string `json:"uastring"` // uastring

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubUserKey exists in the database.
func (wuk *WsubUserKey) Exists() bool {
	return wuk._exists
}

// Deleted provides information if the WsubUserKey has been deleted from the database.
func (wuk *WsubUserKey) Deleted() bool {
	return wuk._deleted
}

// Insert inserts the WsubUserKey to the database.
func (wuk *WsubUserKey) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wuk._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO jlabo.wsub_user_keys (` +
		`user_id, token, series, invalid, time, uastring` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wuk.UserID, wuk.Token, wuk.Series, wuk.Invalid, wuk.Time, wuk.Uastring)
	res, err := db.Exec(sqlstr, wuk.UserID, wuk.Token, wuk.Series, wuk.Invalid, wuk.Time, wuk.Uastring)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	wuk.ID = uint(id)
	wuk._exists = true

	return nil
}

// Update updates the WsubUserKey in the database.
func (wuk *WsubUserKey) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wuk._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wuk._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE jlabo.wsub_user_keys SET ` +
		`user_id = ?, token = ?, series = ?, invalid = ?, time = ?, uastring = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, wuk.UserID, wuk.Token, wuk.Series, wuk.Invalid, wuk.Time, wuk.Uastring, wuk.ID)
	_, err = db.Exec(sqlstr, wuk.UserID, wuk.Token, wuk.Series, wuk.Invalid, wuk.Time, wuk.Uastring, wuk.ID)
	return err
}

// Save saves the WsubUserKey to the database.
func (wuk *WsubUserKey) Save(db XODB) error {
	if wuk.Exists() {
		return wuk.Update(db)
	}

	return wuk.Insert(db)
}

// Delete deletes the WsubUserKey from the database.
func (wuk *WsubUserKey) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wuk._exists {
		return nil
	}

	// if deleted, bail
	if wuk._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM jlabo.wsub_user_keys WHERE id = ?`

	// run query
	XOLog(sqlstr, wuk.ID)
	_, err = db.Exec(sqlstr, wuk.ID)
	if err != nil {
		return err
	}

	// set deleted
	wuk._deleted = true

	return nil
}

// WsubUserKeyBySeries retrieves a row from 'jlabo.wsub_user_keys' as a WsubUserKey.
//
// Generated from index 'series'.
func WsubUserKeyBySeries(db XODB, series string) (*WsubUserKey, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, token, series, invalid, time, uastring ` +
		`FROM jlabo.wsub_user_keys ` +
		`WHERE series = ?`

	// run query
	XOLog(sqlstr, series)
	wuk := WsubUserKey{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, series).Scan(&wuk.ID, &wuk.UserID, &wuk.Token, &wuk.Series, &wuk.Invalid, &wuk.Time, &wuk.Uastring)
	if err != nil {
		return nil, err
	}

	return &wuk, nil
}

// WsubUserKeyBySeries retrieves a row from 'jlabo.wsub_user_keys' as a WsubUserKey.
//
// Generated from index 'series_2'.
func WsubUserKeyBySeries(db XODB, series string) (*WsubUserKey, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, token, series, invalid, time, uastring ` +
		`FROM jlabo.wsub_user_keys ` +
		`WHERE series = ?`

	// run query
	XOLog(sqlstr, series)
	wuk := WsubUserKey{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, series).Scan(&wuk.ID, &wuk.UserID, &wuk.Token, &wuk.Series, &wuk.Invalid, &wuk.Time, &wuk.Uastring)
	if err != nil {
		return nil, err
	}

	return &wuk, nil
}

// WsubUserKeyBySeries retrieves a row from 'jlabo.wsub_user_keys' as a WsubUserKey.
//
// Generated from index 'series_3'.
func WsubUserKeyBySeries(db XODB, series string) (*WsubUserKey, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, token, series, invalid, time, uastring ` +
		`FROM jlabo.wsub_user_keys ` +
		`WHERE series = ?`

	// run query
	XOLog(sqlstr, series)
	wuk := WsubUserKey{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, series).Scan(&wuk.ID, &wuk.UserID, &wuk.Token, &wuk.Series, &wuk.Invalid, &wuk.Time, &wuk.Uastring)
	if err != nil {
		return nil, err
	}

	return &wuk, nil
}

// WsubUserKeysByUserID retrieves a row from 'jlabo.wsub_user_keys' as a WsubUserKey.
//
// Generated from index 'user_id'.
func WsubUserKeysByUserID(db XODB, userID string) ([]*WsubUserKey, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, token, series, invalid, time, uastring ` +
		`FROM jlabo.wsub_user_keys ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubUserKey{}
	for q.Next() {
		wuk := WsubUserKey{
			_exists: true,
		}

		// scan
		err = q.Scan(&wuk.ID, &wuk.UserID, &wuk.Token, &wuk.Series, &wuk.Invalid, &wuk.Time, &wuk.Uastring)
		if err != nil {
			return nil, err
		}

		res = append(res, &wuk)
	}

	return res, nil
}

// WsubUserKeyByID retrieves a row from 'jlabo.wsub_user_keys' as a WsubUserKey.
//
// Generated from index 'wsub_user_keys_id_pkey'.
func WsubUserKeyByID(db XODB, id uint) (*WsubUserKey, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, token, series, invalid, time, uastring ` +
		`FROM jlabo.wsub_user_keys ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	wuk := WsubUserKey{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&wuk.ID, &wuk.UserID, &wuk.Token, &wuk.Series, &wuk.Invalid, &wuk.Time, &wuk.Uastring)
	if err != nil {
		return nil, err
	}

	return &wuk, nil
}
