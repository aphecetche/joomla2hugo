// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// WsubSchema represents a row from 'jlabo.wsub_schemas'.
type WsubSchema struct {
	ExtensionID int    `json:"extension_id"` // extension_id
	VersionID   string `json:"version_id"`   // version_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubSchema exists in the database.
func (ws *WsubSchema) Exists() bool {
	return ws._exists
}

// Deleted provides information if the WsubSchema has been deleted from the database.
func (ws *WsubSchema) Deleted() bool {
	return ws._deleted
}

// Insert inserts the WsubSchema to the database.
func (ws *WsubSchema) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ws._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO jlabo.wsub_schemas (` +
		`extension_id, version_id` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ws.ExtensionID, ws.VersionID)
	_, err = db.Exec(sqlstr, ws.ExtensionID, ws.VersionID)
	if err != nil {
		return err
	}

	// set existence
	ws._exists = true

	return nil
}

// Update statements omitted due to lack of fields other than primary key

// Delete deletes the WsubSchema from the database.
func (ws *WsubSchema) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ws._exists {
		return nil
	}

	// if deleted, bail
	if ws._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM jlabo.wsub_schemas WHERE extension_id = ? AND version_id = ?`

	// run query
	XOLog(sqlstr, ws.ExtensionID, ws.VersionID)
	_, err = db.Exec(sqlstr, ws.ExtensionID, ws.VersionID)
	if err != nil {
		return err
	}

	// set deleted
	ws._deleted = true

	return nil
}

// WsubSchemaByVersionID retrieves a row from 'jlabo.wsub_schemas' as a WsubSchema.
//
// Generated from index 'wsub_schemas_version_id_pkey'.
func WsubSchemaByVersionID(db XODB, versionID string) (*WsubSchema, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`extension_id, version_id ` +
		`FROM jlabo.wsub_schemas ` +
		`WHERE version_id = ?`

	// run query
	XOLog(sqlstr, versionID)
	ws := WsubSchema{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, versionID).Scan(&ws.ExtensionID, &ws.VersionID)
	if err != nil {
		return nil, err
	}

	return &ws, nil
}
