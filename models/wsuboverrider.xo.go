// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// WsubOverrider represents a row from 'jlabo.wsub_overrider'.
type WsubOverrider struct {
	ID       int    `json:"id"`       // id
	Constant string `json:"constant"` // constant
	String   string `json:"string"`   // string
	File     string `json:"file"`     // file

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubOverrider exists in the database.
func (wo *WsubOverrider) Exists() bool {
	return wo._exists
}

// Deleted provides information if the WsubOverrider has been deleted from the database.
func (wo *WsubOverrider) Deleted() bool {
	return wo._deleted
}

// Insert inserts the WsubOverrider to the database.
func (wo *WsubOverrider) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wo._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO jlabo.wsub_overrider (` +
		`constant, string, file` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wo.Constant, wo.String, wo.File)
	res, err := db.Exec(sqlstr, wo.Constant, wo.String, wo.File)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	wo.ID = int(id)
	wo._exists = true

	return nil
}

// Update updates the WsubOverrider in the database.
func (wo *WsubOverrider) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wo._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wo._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE jlabo.wsub_overrider SET ` +
		`constant = ?, string = ?, file = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, wo.Constant, wo.String, wo.File, wo.ID)
	_, err = db.Exec(sqlstr, wo.Constant, wo.String, wo.File, wo.ID)
	return err
}

// Save saves the WsubOverrider to the database.
func (wo *WsubOverrider) Save(db XODB) error {
	if wo.Exists() {
		return wo.Update(db)
	}

	return wo.Insert(db)
}

// Delete deletes the WsubOverrider from the database.
func (wo *WsubOverrider) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wo._exists {
		return nil
	}

	// if deleted, bail
	if wo._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM jlabo.wsub_overrider WHERE id = ?`

	// run query
	XOLog(sqlstr, wo.ID)
	_, err = db.Exec(sqlstr, wo.ID)
	if err != nil {
		return err
	}

	// set deleted
	wo._deleted = true

	return nil
}

// WsubOverriderByID retrieves a row from 'jlabo.wsub_overrider' as a WsubOverrider.
//
// Generated from index 'wsub_overrider_id_pkey'.
func WsubOverriderByID(db XODB, id int) (*WsubOverrider, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, constant, string, file ` +
		`FROM jlabo.wsub_overrider ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	wo := WsubOverrider{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&wo.ID, &wo.Constant, &wo.String, &wo.File)
	if err != nil {
		return nil, err
	}

	return &wo, nil
}
