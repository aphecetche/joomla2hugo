// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// WsubUsergroup represents a row from 'jlabo.wsub_usergroups'.
type WsubUsergroup struct {
	ID       uint   `json:"id"`        // id
	ParentID uint   `json:"parent_id"` // parent_id
	Lft      int    `json:"lft"`       // lft
	Rgt      int    `json:"rgt"`       // rgt
	Title    string `json:"title"`     // title

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubUsergroup exists in the database.
func (wu *WsubUsergroup) Exists() bool {
	return wu._exists
}

// Deleted provides information if the WsubUsergroup has been deleted from the database.
func (wu *WsubUsergroup) Deleted() bool {
	return wu._deleted
}

// Insert inserts the WsubUsergroup to the database.
func (wu *WsubUsergroup) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wu._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO jlabo.wsub_usergroups (` +
		`parent_id, lft, rgt, title` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wu.ParentID, wu.Lft, wu.Rgt, wu.Title)
	res, err := db.Exec(sqlstr, wu.ParentID, wu.Lft, wu.Rgt, wu.Title)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	wu.ID = uint(id)
	wu._exists = true

	return nil
}

// Update updates the WsubUsergroup in the database.
func (wu *WsubUsergroup) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wu._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wu._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE jlabo.wsub_usergroups SET ` +
		`parent_id = ?, lft = ?, rgt = ?, title = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, wu.ParentID, wu.Lft, wu.Rgt, wu.Title, wu.ID)
	_, err = db.Exec(sqlstr, wu.ParentID, wu.Lft, wu.Rgt, wu.Title, wu.ID)
	return err
}

// Save saves the WsubUsergroup to the database.
func (wu *WsubUsergroup) Save(db XODB) error {
	if wu.Exists() {
		return wu.Update(db)
	}

	return wu.Insert(db)
}

// Delete deletes the WsubUsergroup from the database.
func (wu *WsubUsergroup) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wu._exists {
		return nil
	}

	// if deleted, bail
	if wu._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM jlabo.wsub_usergroups WHERE id = ?`

	// run query
	XOLog(sqlstr, wu.ID)
	_, err = db.Exec(sqlstr, wu.ID)
	if err != nil {
		return err
	}

	// set deleted
	wu._deleted = true

	return nil
}

// WsubUsergroupsByParentID retrieves a row from 'jlabo.wsub_usergroups' as a WsubUsergroup.
//
// Generated from index 'idx_usergroup_adjacency_lookup'.
func WsubUsergroupsByParentID(db XODB, parentID uint) ([]*WsubUsergroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, parent_id, lft, rgt, title ` +
		`FROM jlabo.wsub_usergroups ` +
		`WHERE parent_id = ?`

	// run query
	XOLog(sqlstr, parentID)
	q, err := db.Query(sqlstr, parentID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubUsergroup{}
	for q.Next() {
		wu := WsubUsergroup{
			_exists: true,
		}

		// scan
		err = q.Scan(&wu.ID, &wu.ParentID, &wu.Lft, &wu.Rgt, &wu.Title)
		if err != nil {
			return nil, err
		}

		res = append(res, &wu)
	}

	return res, nil
}

// WsubUsergroupsByLftRgt retrieves a row from 'jlabo.wsub_usergroups' as a WsubUsergroup.
//
// Generated from index 'idx_usergroup_nested_set_lookup'.
func WsubUsergroupsByLftRgt(db XODB, lft int, rgt int) ([]*WsubUsergroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, parent_id, lft, rgt, title ` +
		`FROM jlabo.wsub_usergroups ` +
		`WHERE lft = ? AND rgt = ?`

	// run query
	XOLog(sqlstr, lft, rgt)
	q, err := db.Query(sqlstr, lft, rgt)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubUsergroup{}
	for q.Next() {
		wu := WsubUsergroup{
			_exists: true,
		}

		// scan
		err = q.Scan(&wu.ID, &wu.ParentID, &wu.Lft, &wu.Rgt, &wu.Title)
		if err != nil {
			return nil, err
		}

		res = append(res, &wu)
	}

	return res, nil
}

// WsubUsergroupByParentIDTitle retrieves a row from 'jlabo.wsub_usergroups' as a WsubUsergroup.
//
// Generated from index 'idx_usergroup_parent_title_lookup'.
func WsubUsergroupByParentIDTitle(db XODB, parentID uint, title string) (*WsubUsergroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, parent_id, lft, rgt, title ` +
		`FROM jlabo.wsub_usergroups ` +
		`WHERE parent_id = ? AND title = ?`

	// run query
	XOLog(sqlstr, parentID, title)
	wu := WsubUsergroup{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, parentID, title).Scan(&wu.ID, &wu.ParentID, &wu.Lft, &wu.Rgt, &wu.Title)
	if err != nil {
		return nil, err
	}

	return &wu, nil
}

// WsubUsergroupsByTitle retrieves a row from 'jlabo.wsub_usergroups' as a WsubUsergroup.
//
// Generated from index 'idx_usergroup_title_lookup'.
func WsubUsergroupsByTitle(db XODB, title string) ([]*WsubUsergroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, parent_id, lft, rgt, title ` +
		`FROM jlabo.wsub_usergroups ` +
		`WHERE title = ?`

	// run query
	XOLog(sqlstr, title)
	q, err := db.Query(sqlstr, title)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubUsergroup{}
	for q.Next() {
		wu := WsubUsergroup{
			_exists: true,
		}

		// scan
		err = q.Scan(&wu.ID, &wu.ParentID, &wu.Lft, &wu.Rgt, &wu.Title)
		if err != nil {
			return nil, err
		}

		res = append(res, &wu)
	}

	return res, nil
}

// WsubUsergroupByID retrieves a row from 'jlabo.wsub_usergroups' as a WsubUsergroup.
//
// Generated from index 'wsub_usergroups_id_pkey'.
func WsubUsergroupByID(db XODB, id uint) (*WsubUsergroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, parent_id, lft, rgt, title ` +
		`FROM jlabo.wsub_usergroups ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	wu := WsubUsergroup{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&wu.ID, &wu.ParentID, &wu.Lft, &wu.Rgt, &wu.Title)
	if err != nil {
		return nil, err
	}

	return &wu, nil
}
