// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// WsubAssociation represents a row from 'jlabo.wsub_associations'.
type WsubAssociation struct {
	ID      int    `json:"id"`      // id
	Context string `json:"context"` // context
	Key     string `json:"key"`     // key

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubAssociation exists in the database.
func (wa *WsubAssociation) Exists() bool {
	return wa._exists
}

// Deleted provides information if the WsubAssociation has been deleted from the database.
func (wa *WsubAssociation) Deleted() bool {
	return wa._deleted
}

// Insert inserts the WsubAssociation to the database.
func (wa *WsubAssociation) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wa._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO jlabo.wsub_associations (` +
		`id, context, key` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wa.ID, wa.Context, wa.Key)
	_, err = db.Exec(sqlstr, wa.ID, wa.Context, wa.Key)
	if err != nil {
		return err
	}

	// set existence
	wa._exists = true

	return nil
}

// Update updates the WsubAssociation in the database.
func (wa *WsubAssociation) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wa._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wa._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE jlabo.wsub_associations SET ` +
		`key = ?` +
		` WHERE id = ? AND context = ?`

	// run query
	XOLog(sqlstr, wa.Key, wa.ID, wa.Context)
	_, err = db.Exec(sqlstr, wa.Key, wa.ID, wa.Context)
	return err
}

// Save saves the WsubAssociation to the database.
func (wa *WsubAssociation) Save(db XODB) error {
	if wa.Exists() {
		return wa.Update(db)
	}

	return wa.Insert(db)
}

// Delete deletes the WsubAssociation from the database.
func (wa *WsubAssociation) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wa._exists {
		return nil
	}

	// if deleted, bail
	if wa._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM jlabo.wsub_associations WHERE id = ? AND context = ?`

	// run query
	XOLog(sqlstr, wa.ID, wa.Context)
	_, err = db.Exec(sqlstr, wa.ID, wa.Context)
	if err != nil {
		return err
	}

	// set deleted
	wa._deleted = true

	return nil
}

// WsubAssociationsByKey retrieves a row from 'jlabo.wsub_associations' as a WsubAssociation.
//
// Generated from index 'idx_key'.
func WsubAssociationsByKey(db XODB, key string) ([]*WsubAssociation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, context, key ` +
		`FROM jlabo.wsub_associations ` +
		`WHERE key = ?`

	// run query
	XOLog(sqlstr, key)
	q, err := db.Query(sqlstr, key)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubAssociation{}
	for q.Next() {
		wa := WsubAssociation{
			_exists: true,
		}

		// scan
		err = q.Scan(&wa.ID, &wa.Context, &wa.Key)
		if err != nil {
			return nil, err
		}

		res = append(res, &wa)
	}

	return res, nil
}

// WsubAssociationByContext retrieves a row from 'jlabo.wsub_associations' as a WsubAssociation.
//
// Generated from index 'wsub_associations_context_pkey'.
func WsubAssociationByContext(db XODB, context string) (*WsubAssociation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, context, key ` +
		`FROM jlabo.wsub_associations ` +
		`WHERE context = ?`

	// run query
	XOLog(sqlstr, context)
	wa := WsubAssociation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, context).Scan(&wa.ID, &wa.Context, &wa.Key)
	if err != nil {
		return nil, err
	}

	return &wa, nil
}
