// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// WsubOsdownloadsDocument represents a row from 'jlabo.wsub_osdownloads_documents'.
type WsubOsdownloadsDocument struct {
	ID                int    `json:"id"`                 // id
	CateID            int    `json:"cate_id"`            // cate_id
	Name              string `json:"name"`               // name
	Alias             string `json:"alias"`              // alias
	Brief             string `json:"brief"`              // brief
	Description1      string `json:"description_1"`      // description_1
	Description2      string `json:"description_2"`      // description_2
	Description3      string `json:"description_3"`      // description_3
	ShowEmail         int    `json:"show_email"`         // show_email
	RequireEmail      int    `json:"require_email"`      // require_email
	RequireAgree      int    `json:"require_agree"`      // require_agree
	DownloadText      string `json:"download_text"`      // download_text
	DownloadColor     string `json:"download_color"`     // download_color
	DocumentationLink string `json:"documentation_link"` // documentation_link
	DemoLink          string `json:"demo_link"`          // demo_link
	SupportLink       string `json:"support_link"`       // support_link
	OtherName         string `json:"other_name"`         // other_name
	OtherLink         string `json:"other_link"`         // other_link
	FilePath          string `json:"file_path"`          // file_path
	Downloaded        int    `json:"downloaded"`         // downloaded
	DirectPage        string `json:"direct_page"`        // direct_page
	Published         int    `json:"published"`          // published
	Ordering          int    `json:"ordering"`           // ordering

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubOsdownloadsDocument exists in the database.
func (wod *WsubOsdownloadsDocument) Exists() bool {
	return wod._exists
}

// Deleted provides information if the WsubOsdownloadsDocument has been deleted from the database.
func (wod *WsubOsdownloadsDocument) Deleted() bool {
	return wod._deleted
}

// Insert inserts the WsubOsdownloadsDocument to the database.
func (wod *WsubOsdownloadsDocument) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wod._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO jlabo.wsub_osdownloads_documents (` +
		`cate_id, name, alias, brief, description_1, description_2, description_3, show_email, require_email, require_agree, download_text, download_color, documentation_link, demo_link, support_link, other_name, other_link, file_path, downloaded, direct_page, published, ordering` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wod.CateID, wod.Name, wod.Alias, wod.Brief, wod.Description1, wod.Description2, wod.Description3, wod.ShowEmail, wod.RequireEmail, wod.RequireAgree, wod.DownloadText, wod.DownloadColor, wod.DocumentationLink, wod.DemoLink, wod.SupportLink, wod.OtherName, wod.OtherLink, wod.FilePath, wod.Downloaded, wod.DirectPage, wod.Published, wod.Ordering)
	res, err := db.Exec(sqlstr, wod.CateID, wod.Name, wod.Alias, wod.Brief, wod.Description1, wod.Description2, wod.Description3, wod.ShowEmail, wod.RequireEmail, wod.RequireAgree, wod.DownloadText, wod.DownloadColor, wod.DocumentationLink, wod.DemoLink, wod.SupportLink, wod.OtherName, wod.OtherLink, wod.FilePath, wod.Downloaded, wod.DirectPage, wod.Published, wod.Ordering)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	wod.ID = int(id)
	wod._exists = true

	return nil
}

// Update updates the WsubOsdownloadsDocument in the database.
func (wod *WsubOsdownloadsDocument) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wod._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wod._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE jlabo.wsub_osdownloads_documents SET ` +
		`cate_id = ?, name = ?, alias = ?, brief = ?, description_1 = ?, description_2 = ?, description_3 = ?, show_email = ?, require_email = ?, require_agree = ?, download_text = ?, download_color = ?, documentation_link = ?, demo_link = ?, support_link = ?, other_name = ?, other_link = ?, file_path = ?, downloaded = ?, direct_page = ?, published = ?, ordering = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, wod.CateID, wod.Name, wod.Alias, wod.Brief, wod.Description1, wod.Description2, wod.Description3, wod.ShowEmail, wod.RequireEmail, wod.RequireAgree, wod.DownloadText, wod.DownloadColor, wod.DocumentationLink, wod.DemoLink, wod.SupportLink, wod.OtherName, wod.OtherLink, wod.FilePath, wod.Downloaded, wod.DirectPage, wod.Published, wod.Ordering, wod.ID)
	_, err = db.Exec(sqlstr, wod.CateID, wod.Name, wod.Alias, wod.Brief, wod.Description1, wod.Description2, wod.Description3, wod.ShowEmail, wod.RequireEmail, wod.RequireAgree, wod.DownloadText, wod.DownloadColor, wod.DocumentationLink, wod.DemoLink, wod.SupportLink, wod.OtherName, wod.OtherLink, wod.FilePath, wod.Downloaded, wod.DirectPage, wod.Published, wod.Ordering, wod.ID)
	return err
}

// Save saves the WsubOsdownloadsDocument to the database.
func (wod *WsubOsdownloadsDocument) Save(db XODB) error {
	if wod.Exists() {
		return wod.Update(db)
	}

	return wod.Insert(db)
}

// Delete deletes the WsubOsdownloadsDocument from the database.
func (wod *WsubOsdownloadsDocument) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wod._exists {
		return nil
	}

	// if deleted, bail
	if wod._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM jlabo.wsub_osdownloads_documents WHERE id = ?`

	// run query
	XOLog(sqlstr, wod.ID)
	_, err = db.Exec(sqlstr, wod.ID)
	if err != nil {
		return err
	}

	// set deleted
	wod._deleted = true

	return nil
}

// WsubOsdownloadsDocumentByID retrieves a row from 'jlabo.wsub_osdownloads_documents' as a WsubOsdownloadsDocument.
//
// Generated from index 'wsub_osdownloads_documents_id_pkey'.
func WsubOsdownloadsDocumentByID(db XODB, id int) (*WsubOsdownloadsDocument, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, cate_id, name, alias, brief, description_1, description_2, description_3, show_email, require_email, require_agree, download_text, download_color, documentation_link, demo_link, support_link, other_name, other_link, file_path, downloaded, direct_page, published, ordering ` +
		`FROM jlabo.wsub_osdownloads_documents ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	wod := WsubOsdownloadsDocument{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&wod.ID, &wod.CateID, &wod.Name, &wod.Alias, &wod.Brief, &wod.Description1, &wod.Description2, &wod.Description3, &wod.ShowEmail, &wod.RequireEmail, &wod.RequireAgree, &wod.DownloadText, &wod.DownloadColor, &wod.DocumentationLink, &wod.DemoLink, &wod.SupportLink, &wod.OtherName, &wod.OtherLink, &wod.FilePath, &wod.Downloaded, &wod.DirectPage, &wod.Published, &wod.Ordering)
	if err != nil {
		return nil, err
	}

	return &wod, nil
}
