// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// WsubWfProfile represents a row from 'jlabo.wsub_wf_profiles'.
type WsubWfProfile struct {
	ID             int            `json:"id"`               // id
	Name           string         `json:"name"`             // name
	Description    sql.NullString `json:"description"`      // description
	Users          string         `json:"users"`            // users
	Types          sql.NullString `json:"types"`            // types
	Components     string         `json:"components"`       // components
	Area           int8           `json:"area"`             // area
	Device         sql.NullString `json:"device"`           // device
	Rows           string         `json:"rows"`             // rows
	Plugins        string         `json:"plugins"`          // plugins
	Published      int8           `json:"published"`        // published
	Ordering       int            `json:"ordering"`         // ordering
	CheckedOut     int8           `json:"checked_out"`      // checked_out
	CheckedOutTime time.Time      `json:"checked_out_time"` // checked_out_time
	Params         string         `json:"params"`           // params

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubWfProfile exists in the database.
func (wwp *WsubWfProfile) Exists() bool {
	return wwp._exists
}

// Deleted provides information if the WsubWfProfile has been deleted from the database.
func (wwp *WsubWfProfile) Deleted() bool {
	return wwp._deleted
}

// Insert inserts the WsubWfProfile to the database.
func (wwp *WsubWfProfile) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wwp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO jlabo.wsub_wf_profiles (` +
		`name, description, users, types, components, area, device, rows, plugins, published, ordering, checked_out, checked_out_time, params` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wwp.Name, wwp.Description, wwp.Users, wwp.Types, wwp.Components, wwp.Area, wwp.Device, wwp.Rows, wwp.Plugins, wwp.Published, wwp.Ordering, wwp.CheckedOut, wwp.CheckedOutTime, wwp.Params)
	res, err := db.Exec(sqlstr, wwp.Name, wwp.Description, wwp.Users, wwp.Types, wwp.Components, wwp.Area, wwp.Device, wwp.Rows, wwp.Plugins, wwp.Published, wwp.Ordering, wwp.CheckedOut, wwp.CheckedOutTime, wwp.Params)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	wwp.ID = int(id)
	wwp._exists = true

	return nil
}

// Update updates the WsubWfProfile in the database.
func (wwp *WsubWfProfile) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wwp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wwp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE jlabo.wsub_wf_profiles SET ` +
		`name = ?, description = ?, users = ?, types = ?, components = ?, area = ?, device = ?, rows = ?, plugins = ?, published = ?, ordering = ?, checked_out = ?, checked_out_time = ?, params = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, wwp.Name, wwp.Description, wwp.Users, wwp.Types, wwp.Components, wwp.Area, wwp.Device, wwp.Rows, wwp.Plugins, wwp.Published, wwp.Ordering, wwp.CheckedOut, wwp.CheckedOutTime, wwp.Params, wwp.ID)
	_, err = db.Exec(sqlstr, wwp.Name, wwp.Description, wwp.Users, wwp.Types, wwp.Components, wwp.Area, wwp.Device, wwp.Rows, wwp.Plugins, wwp.Published, wwp.Ordering, wwp.CheckedOut, wwp.CheckedOutTime, wwp.Params, wwp.ID)
	return err
}

// Save saves the WsubWfProfile to the database.
func (wwp *WsubWfProfile) Save(db XODB) error {
	if wwp.Exists() {
		return wwp.Update(db)
	}

	return wwp.Insert(db)
}

// Delete deletes the WsubWfProfile from the database.
func (wwp *WsubWfProfile) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wwp._exists {
		return nil
	}

	// if deleted, bail
	if wwp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM jlabo.wsub_wf_profiles WHERE id = ?`

	// run query
	XOLog(sqlstr, wwp.ID)
	_, err = db.Exec(sqlstr, wwp.ID)
	if err != nil {
		return err
	}

	// set deleted
	wwp._deleted = true

	return nil
}

// WsubWfProfileByID retrieves a row from 'jlabo.wsub_wf_profiles' as a WsubWfProfile.
//
// Generated from index 'wsub_wf_profiles_id_pkey'.
func WsubWfProfileByID(db XODB, id int) (*WsubWfProfile, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, description, users, types, components, area, device, rows, plugins, published, ordering, checked_out, checked_out_time, params ` +
		`FROM jlabo.wsub_wf_profiles ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	wwp := WsubWfProfile{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&wwp.ID, &wwp.Name, &wwp.Description, &wwp.Users, &wwp.Types, &wwp.Components, &wwp.Area, &wwp.Device, &wwp.Rows, &wwp.Plugins, &wwp.Published, &wwp.Ordering, &wwp.CheckedOut, &wwp.CheckedOutTime, &wwp.Params)
	if err != nil {
		return nil, err
	}

	return &wwp, nil
}
