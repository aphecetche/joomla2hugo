// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// WsubContentitemTagMap represents a row from 'jlabo.wsub_contentitem_tag_map'.
type WsubContentitemTagMap struct {
	TypeAlias     string    `json:"type_alias"`      // type_alias
	CoreContentID uint      `json:"core_content_id"` // core_content_id
	ContentItemID int       `json:"content_item_id"` // content_item_id
	TagID         uint      `json:"tag_id"`          // tag_id
	TagDate       time.Time `json:"tag_date"`        // tag_date
	TypeID        int       `json:"type_id"`         // type_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubContentitemTagMap exists in the database.
func (wctm *WsubContentitemTagMap) Exists() bool {
	return wctm._exists
}

// Deleted provides information if the WsubContentitemTagMap has been deleted from the database.
func (wctm *WsubContentitemTagMap) Deleted() bool {
	return wctm._deleted
}

// Insert inserts the WsubContentitemTagMap to the database.
func (wctm *WsubContentitemTagMap) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wctm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO jlabo.wsub_contentitem_tag_map (` +
		`type_alias, core_content_id, content_item_id, tag_id, tag_date, type_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wctm.TypeAlias, wctm.CoreContentID, wctm.ContentItemID, wctm.TagID, wctm.TagDate, wctm.TypeID)
	_, err = db.Exec(sqlstr, wctm.TypeAlias, wctm.CoreContentID, wctm.ContentItemID, wctm.TagID, wctm.TagDate, wctm.TypeID)
	if err != nil {
		return err
	}

	// set existence
	wctm._exists = true

	return nil
}

// Update updates the WsubContentitemTagMap in the database.
func (wctm *WsubContentitemTagMap) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wctm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wctm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE jlabo.wsub_contentitem_tag_map SET ` +
		`type_alias = ?, core_content_id = ?, tag_date = ?` +
		` WHERE content_item_id = ? AND tag_id = ? AND type_id = ?`

	// run query
	XOLog(sqlstr, wctm.TypeAlias, wctm.CoreContentID, wctm.TagDate, wctm.ContentItemID, wctm.TagID, wctm.TypeID)
	_, err = db.Exec(sqlstr, wctm.TypeAlias, wctm.CoreContentID, wctm.TagDate, wctm.ContentItemID, wctm.TagID, wctm.TypeID)
	return err
}

// Save saves the WsubContentitemTagMap to the database.
func (wctm *WsubContentitemTagMap) Save(db XODB) error {
	if wctm.Exists() {
		return wctm.Update(db)
	}

	return wctm.Insert(db)
}

// Delete deletes the WsubContentitemTagMap from the database.
func (wctm *WsubContentitemTagMap) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wctm._exists {
		return nil
	}

	// if deleted, bail
	if wctm._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM jlabo.wsub_contentitem_tag_map WHERE content_item_id = ? AND tag_id = ? AND type_id = ?`

	// run query
	XOLog(sqlstr, wctm.ContentItemID, wctm.TagID, wctm.TypeID)
	_, err = db.Exec(sqlstr, wctm.ContentItemID, wctm.TagID, wctm.TypeID)
	if err != nil {
		return err
	}

	// set deleted
	wctm._deleted = true

	return nil
}

// WsubContentitemTagMapsByCoreContentID retrieves a row from 'jlabo.wsub_contentitem_tag_map' as a WsubContentitemTagMap.
//
// Generated from index 'idx_core_content_id'.
func WsubContentitemTagMapsByCoreContentID(db XODB, coreContentID uint) ([]*WsubContentitemTagMap, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`type_alias, core_content_id, content_item_id, tag_id, tag_date, type_id ` +
		`FROM jlabo.wsub_contentitem_tag_map ` +
		`WHERE core_content_id = ?`

	// run query
	XOLog(sqlstr, coreContentID)
	q, err := db.Query(sqlstr, coreContentID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubContentitemTagMap{}
	for q.Next() {
		wctm := WsubContentitemTagMap{
			_exists: true,
		}

		// scan
		err = q.Scan(&wctm.TypeAlias, &wctm.CoreContentID, &wctm.ContentItemID, &wctm.TagID, &wctm.TagDate, &wctm.TypeID)
		if err != nil {
			return nil, err
		}

		res = append(res, &wctm)
	}

	return res, nil
}

// WsubContentitemTagMapsByTagDateTagID retrieves a row from 'jlabo.wsub_contentitem_tag_map' as a WsubContentitemTagMap.
//
// Generated from index 'idx_date_id'.
func WsubContentitemTagMapsByTagDateTagID(db XODB, tagDate time.Time, tagID uint) ([]*WsubContentitemTagMap, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`type_alias, core_content_id, content_item_id, tag_id, tag_date, type_id ` +
		`FROM jlabo.wsub_contentitem_tag_map ` +
		`WHERE tag_date = ? AND tag_id = ?`

	// run query
	XOLog(sqlstr, tagDate, tagID)
	q, err := db.Query(sqlstr, tagDate, tagID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubContentitemTagMap{}
	for q.Next() {
		wctm := WsubContentitemTagMap{
			_exists: true,
		}

		// scan
		err = q.Scan(&wctm.TypeAlias, &wctm.CoreContentID, &wctm.ContentItemID, &wctm.TagID, &wctm.TagDate, &wctm.TypeID)
		if err != nil {
			return nil, err
		}

		res = append(res, &wctm)
	}

	return res, nil
}

// WsubContentitemTagMapsByTagID retrieves a row from 'jlabo.wsub_contentitem_tag_map' as a WsubContentitemTagMap.
//
// Generated from index 'idx_tag'.
func WsubContentitemTagMapsByTagID(db XODB, tagID uint) ([]*WsubContentitemTagMap, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`type_alias, core_content_id, content_item_id, tag_id, tag_date, type_id ` +
		`FROM jlabo.wsub_contentitem_tag_map ` +
		`WHERE tag_id = ?`

	// run query
	XOLog(sqlstr, tagID)
	q, err := db.Query(sqlstr, tagID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubContentitemTagMap{}
	for q.Next() {
		wctm := WsubContentitemTagMap{
			_exists: true,
		}

		// scan
		err = q.Scan(&wctm.TypeAlias, &wctm.CoreContentID, &wctm.ContentItemID, &wctm.TagID, &wctm.TagDate, &wctm.TypeID)
		if err != nil {
			return nil, err
		}

		res = append(res, &wctm)
	}

	return res, nil
}

// WsubContentitemTagMapsByTagIDTypeID retrieves a row from 'jlabo.wsub_contentitem_tag_map' as a WsubContentitemTagMap.
//
// Generated from index 'idx_tag_type'.
func WsubContentitemTagMapsByTagIDTypeID(db XODB, tagID uint, typeID int) ([]*WsubContentitemTagMap, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`type_alias, core_content_id, content_item_id, tag_id, tag_date, type_id ` +
		`FROM jlabo.wsub_contentitem_tag_map ` +
		`WHERE tag_id = ? AND type_id = ?`

	// run query
	XOLog(sqlstr, tagID, typeID)
	q, err := db.Query(sqlstr, tagID, typeID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubContentitemTagMap{}
	for q.Next() {
		wctm := WsubContentitemTagMap{
			_exists: true,
		}

		// scan
		err = q.Scan(&wctm.TypeAlias, &wctm.CoreContentID, &wctm.ContentItemID, &wctm.TagID, &wctm.TagDate, &wctm.TypeID)
		if err != nil {
			return nil, err
		}

		res = append(res, &wctm)
	}

	return res, nil
}

// WsubContentitemTagMapsByTypeID retrieves a row from 'jlabo.wsub_contentitem_tag_map' as a WsubContentitemTagMap.
//
// Generated from index 'idx_type'.
func WsubContentitemTagMapsByTypeID(db XODB, typeID int) ([]*WsubContentitemTagMap, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`type_alias, core_content_id, content_item_id, tag_id, tag_date, type_id ` +
		`FROM jlabo.wsub_contentitem_tag_map ` +
		`WHERE type_id = ?`

	// run query
	XOLog(sqlstr, typeID)
	q, err := db.Query(sqlstr, typeID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubContentitemTagMap{}
	for q.Next() {
		wctm := WsubContentitemTagMap{
			_exists: true,
		}

		// scan
		err = q.Scan(&wctm.TypeAlias, &wctm.CoreContentID, &wctm.ContentItemID, &wctm.TagID, &wctm.TagDate, &wctm.TypeID)
		if err != nil {
			return nil, err
		}

		res = append(res, &wctm)
	}

	return res, nil
}

// WsubContentitemTagMapByTypeIDContentItemIDTagID retrieves a row from 'jlabo.wsub_contentitem_tag_map' as a WsubContentitemTagMap.
//
// Generated from index 'uc_ItemnameTagid'.
func WsubContentitemTagMapByTypeIDContentItemIDTagID(db XODB, typeID int, contentItemID int, tagID uint) (*WsubContentitemTagMap, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`type_alias, core_content_id, content_item_id, tag_id, tag_date, type_id ` +
		`FROM jlabo.wsub_contentitem_tag_map ` +
		`WHERE type_id = ? AND content_item_id = ? AND tag_id = ?`

	// run query
	XOLog(sqlstr, typeID, contentItemID, tagID)
	wctm := WsubContentitemTagMap{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, typeID, contentItemID, tagID).Scan(&wctm.TypeAlias, &wctm.CoreContentID, &wctm.ContentItemID, &wctm.TagID, &wctm.TagDate, &wctm.TypeID)
	if err != nil {
		return nil, err
	}

	return &wctm, nil
}

// WsubContentitemTagMapByTypeID retrieves a row from 'jlabo.wsub_contentitem_tag_map' as a WsubContentitemTagMap.
//
// Generated from index 'wsub_contentitem_tag_map_type_id_pkey'.
func WsubContentitemTagMapByTypeID(db XODB, typeID int) (*WsubContentitemTagMap, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`type_alias, core_content_id, content_item_id, tag_id, tag_date, type_id ` +
		`FROM jlabo.wsub_contentitem_tag_map ` +
		`WHERE type_id = ?`

	// run query
	XOLog(sqlstr, typeID)
	wctm := WsubContentitemTagMap{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, typeID).Scan(&wctm.TypeAlias, &wctm.CoreContentID, &wctm.ContentItemID, &wctm.TagID, &wctm.TagDate, &wctm.TypeID)
	if err != nil {
		return nil, err
	}

	return &wctm, nil
}
