// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// WsubMessagesCfg represents a row from 'jlabo.wsub_messages_cfg'.
type WsubMessagesCfg struct {
	UserID   uint   `json:"user_id"`   // user_id
	CfgName  string `json:"cfg_name"`  // cfg_name
	CfgValue string `json:"cfg_value"` // cfg_value

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubMessagesCfg exists in the database.
func (wmc *WsubMessagesCfg) Exists() bool {
	return wmc._exists
}

// Deleted provides information if the WsubMessagesCfg has been deleted from the database.
func (wmc *WsubMessagesCfg) Deleted() bool {
	return wmc._deleted
}

// Insert inserts the WsubMessagesCfg to the database.
func (wmc *WsubMessagesCfg) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wmc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO jlabo.wsub_messages_cfg (` +
		`user_id, cfg_name, cfg_value` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wmc.UserID, wmc.CfgName, wmc.CfgValue)
	_, err = db.Exec(sqlstr, wmc.UserID, wmc.CfgName, wmc.CfgValue)
	if err != nil {
		return err
	}

	// set existence
	wmc._exists = true

	return nil
}

// Update updates the WsubMessagesCfg in the database.
func (wmc *WsubMessagesCfg) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wmc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wmc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE jlabo.wsub_messages_cfg SET ` +
		`cfg_value = ?` +
		` WHERE user_id = ? AND cfg_name = ?`

	// run query
	XOLog(sqlstr, wmc.CfgValue, wmc.UserID, wmc.CfgName)
	_, err = db.Exec(sqlstr, wmc.CfgValue, wmc.UserID, wmc.CfgName)
	return err
}

// Save saves the WsubMessagesCfg to the database.
func (wmc *WsubMessagesCfg) Save(db XODB) error {
	if wmc.Exists() {
		return wmc.Update(db)
	}

	return wmc.Insert(db)
}

// Delete deletes the WsubMessagesCfg from the database.
func (wmc *WsubMessagesCfg) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wmc._exists {
		return nil
	}

	// if deleted, bail
	if wmc._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM jlabo.wsub_messages_cfg WHERE user_id = ? AND cfg_name = ?`

	// run query
	XOLog(sqlstr, wmc.UserID, wmc.CfgName)
	_, err = db.Exec(sqlstr, wmc.UserID, wmc.CfgName)
	if err != nil {
		return err
	}

	// set deleted
	wmc._deleted = true

	return nil
}

// WsubMessagesCfgByUserIDCfgName retrieves a row from 'jlabo.wsub_messages_cfg' as a WsubMessagesCfg.
//
// Generated from index 'idx_user_var_name'.
func WsubMessagesCfgByUserIDCfgName(db XODB, userID uint, cfgName string) (*WsubMessagesCfg, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, cfg_name, cfg_value ` +
		`FROM jlabo.wsub_messages_cfg ` +
		`WHERE user_id = ? AND cfg_name = ?`

	// run query
	XOLog(sqlstr, userID, cfgName)
	wmc := WsubMessagesCfg{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, userID, cfgName).Scan(&wmc.UserID, &wmc.CfgName, &wmc.CfgValue)
	if err != nil {
		return nil, err
	}

	return &wmc, nil
}

// WsubMessagesCfgByCfgName retrieves a row from 'jlabo.wsub_messages_cfg' as a WsubMessagesCfg.
//
// Generated from index 'wsub_messages_cfg_cfg_name_pkey'.
func WsubMessagesCfgByCfgName(db XODB, cfgName string) (*WsubMessagesCfg, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, cfg_name, cfg_value ` +
		`FROM jlabo.wsub_messages_cfg ` +
		`WHERE cfg_name = ?`

	// run query
	XOLog(sqlstr, cfgName)
	wmc := WsubMessagesCfg{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, cfgName).Scan(&wmc.UserID, &wmc.CfgName, &wmc.CfgValue)
	if err != nil {
		return nil, err
	}

	return &wmc, nil
}
