// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// WsubJob represents a row from 'jlabo.wsub_jobs'.
type WsubJob struct {
	ID              int64          `json:"id"`                // id
	Type            string         `json:"type"`              // type
	Alias           string         `json:"alias"`             // alias
	DateStart       time.Time      `json:"date_start"`        // date_start
	DateReply       time.Time      `json:"date_reply"`        // date_reply
	DescriptionFrFr string         `json:"description_fr_FR"` // description_fr_FR
	DescriptionEnGb string         `json:"description_en_GB"` // description_en_GB
	CheckedOut      int            `json:"checked_out"`       // checked_out
	CheckedOutTime  time.Time      `json:"checked_out_time"`  // checked_out_time
	TitleFrFr       string         `json:"title_fr_FR"`       // title_fr_FR
	TitleEnGb       string         `json:"title_en_GB"`       // title_en_GB
	State           int8           `json:"state"`             // state
	Created         time.Time      `json:"created"`           // created
	CreatedBy       int            `json:"created_by"`        // created_by
	Modified        time.Time      `json:"modified"`          // modified
	ModifiedBy      int            `json:"modified_by"`       // modified_by
	PublishUp       time.Time      `json:"publish_up"`        // publish_up
	PublishDown     time.Time      `json:"publish_down"`      // publish_down
	Attribs         string         `json:"attribs"`           // attribs
	MiscFrFr        string         `json:"misc_fr_FR"`        // misc_fr_FR
	MiscEnGb        string         `json:"misc_en_GB"`        // misc_en_GB
	Logo1           sql.NullString `json:"logo1"`             // logo1
	Logo2           sql.NullString `json:"logo2"`             // logo2
	Logo3           sql.NullString `json:"logo3"`             // logo3
	Logo4           sql.NullString `json:"logo4"`             // logo4
	Logo5           sql.NullString `json:"logo5"`             // logo5
	Group           sql.NullString `json:"group"`             // group
	Keywords        sql.NullString `json:"keywords"`          // keywords

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubJob exists in the database.
func (wj *WsubJob) Exists() bool {
	return wj._exists
}

// Deleted provides information if the WsubJob has been deleted from the database.
func (wj *WsubJob) Deleted() bool {
	return wj._deleted
}

// Insert inserts the WsubJob to the database.
func (wj *WsubJob) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wj._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO jlabo.wsub_jobs (` +
		`type, alias, date_start, date_reply, description_fr_FR, description_en_GB, checked_out, checked_out_time, title_fr_FR, title_en_GB, state, created, created_by, modified, modified_by, publish_up, publish_down, attribs, misc_fr_FR, misc_en_GB, logo1, logo2, logo3, logo4, logo5, group, keywords` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wj.Type, wj.Alias, wj.DateStart, wj.DateReply, wj.DescriptionFrFr, wj.DescriptionEnGb, wj.CheckedOut, wj.CheckedOutTime, wj.TitleFrFr, wj.TitleEnGb, wj.State, wj.Created, wj.CreatedBy, wj.Modified, wj.ModifiedBy, wj.PublishUp, wj.PublishDown, wj.Attribs, wj.MiscFrFr, wj.MiscEnGb, wj.Logo1, wj.Logo2, wj.Logo3, wj.Logo4, wj.Logo5, wj.Group, wj.Keywords)
	res, err := db.Exec(sqlstr, wj.Type, wj.Alias, wj.DateStart, wj.DateReply, wj.DescriptionFrFr, wj.DescriptionEnGb, wj.CheckedOut, wj.CheckedOutTime, wj.TitleFrFr, wj.TitleEnGb, wj.State, wj.Created, wj.CreatedBy, wj.Modified, wj.ModifiedBy, wj.PublishUp, wj.PublishDown, wj.Attribs, wj.MiscFrFr, wj.MiscEnGb, wj.Logo1, wj.Logo2, wj.Logo3, wj.Logo4, wj.Logo5, wj.Group, wj.Keywords)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	wj.ID = int64(id)
	wj._exists = true

	return nil
}

// Update updates the WsubJob in the database.
func (wj *WsubJob) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wj._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wj._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE jlabo.wsub_jobs SET ` +
		`type = ?, alias = ?, date_start = ?, date_reply = ?, description_fr_FR = ?, description_en_GB = ?, checked_out = ?, checked_out_time = ?, title_fr_FR = ?, title_en_GB = ?, state = ?, created = ?, created_by = ?, modified = ?, modified_by = ?, publish_up = ?, publish_down = ?, attribs = ?, misc_fr_FR = ?, misc_en_GB = ?, logo1 = ?, logo2 = ?, logo3 = ?, logo4 = ?, logo5 = ?, group = ?, keywords = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, wj.Type, wj.Alias, wj.DateStart, wj.DateReply, wj.DescriptionFrFr, wj.DescriptionEnGb, wj.CheckedOut, wj.CheckedOutTime, wj.TitleFrFr, wj.TitleEnGb, wj.State, wj.Created, wj.CreatedBy, wj.Modified, wj.ModifiedBy, wj.PublishUp, wj.PublishDown, wj.Attribs, wj.MiscFrFr, wj.MiscEnGb, wj.Logo1, wj.Logo2, wj.Logo3, wj.Logo4, wj.Logo5, wj.Group, wj.Keywords, wj.ID)
	_, err = db.Exec(sqlstr, wj.Type, wj.Alias, wj.DateStart, wj.DateReply, wj.DescriptionFrFr, wj.DescriptionEnGb, wj.CheckedOut, wj.CheckedOutTime, wj.TitleFrFr, wj.TitleEnGb, wj.State, wj.Created, wj.CreatedBy, wj.Modified, wj.ModifiedBy, wj.PublishUp, wj.PublishDown, wj.Attribs, wj.MiscFrFr, wj.MiscEnGb, wj.Logo1, wj.Logo2, wj.Logo3, wj.Logo4, wj.Logo5, wj.Group, wj.Keywords, wj.ID)
	return err
}

// Save saves the WsubJob to the database.
func (wj *WsubJob) Save(db XODB) error {
	if wj.Exists() {
		return wj.Update(db)
	}

	return wj.Insert(db)
}

// Delete deletes the WsubJob from the database.
func (wj *WsubJob) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wj._exists {
		return nil
	}

	// if deleted, bail
	if wj._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM jlabo.wsub_jobs WHERE id = ?`

	// run query
	XOLog(sqlstr, wj.ID)
	_, err = db.Exec(sqlstr, wj.ID)
	if err != nil {
		return err
	}

	// set deleted
	wj._deleted = true

	return nil
}

// WsubJobsByAlias retrieves a row from 'jlabo.wsub_jobs' as a WsubJob.
//
// Generated from index 'alias'.
func WsubJobsByAlias(db XODB, alias string) ([]*WsubJob, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, type, alias, date_start, date_reply, description_fr_FR, description_en_GB, checked_out, checked_out_time, title_fr_FR, title_en_GB, state, created, created_by, modified, modified_by, publish_up, publish_down, attribs, misc_fr_FR, misc_en_GB, logo1, logo2, logo3, logo4, logo5, group, keywords ` +
		`FROM jlabo.wsub_jobs ` +
		`WHERE alias = ?`

	// run query
	XOLog(sqlstr, alias)
	q, err := db.Query(sqlstr, alias)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubJob{}
	for q.Next() {
		wj := WsubJob{
			_exists: true,
		}

		// scan
		err = q.Scan(&wj.ID, &wj.Type, &wj.Alias, &wj.DateStart, &wj.DateReply, &wj.DescriptionFrFr, &wj.DescriptionEnGb, &wj.CheckedOut, &wj.CheckedOutTime, &wj.TitleFrFr, &wj.TitleEnGb, &wj.State, &wj.Created, &wj.CreatedBy, &wj.Modified, &wj.ModifiedBy, &wj.PublishUp, &wj.PublishDown, &wj.Attribs, &wj.MiscFrFr, &wj.MiscEnGb, &wj.Logo1, &wj.Logo2, &wj.Logo3, &wj.Logo4, &wj.Logo5, &wj.Group, &wj.Keywords)
		if err != nil {
			return nil, err
		}

		res = append(res, &wj)
	}

	return res, nil
}

// WsubJobByID retrieves a row from 'jlabo.wsub_jobs' as a WsubJob.
//
// Generated from index 'id'.
func WsubJobByID(db XODB, id int64) (*WsubJob, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, type, alias, date_start, date_reply, description_fr_FR, description_en_GB, checked_out, checked_out_time, title_fr_FR, title_en_GB, state, created, created_by, modified, modified_by, publish_up, publish_down, attribs, misc_fr_FR, misc_en_GB, logo1, logo2, logo3, logo4, logo5, group, keywords ` +
		`FROM jlabo.wsub_jobs ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	wj := WsubJob{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&wj.ID, &wj.Type, &wj.Alias, &wj.DateStart, &wj.DateReply, &wj.DescriptionFrFr, &wj.DescriptionEnGb, &wj.CheckedOut, &wj.CheckedOutTime, &wj.TitleFrFr, &wj.TitleEnGb, &wj.State, &wj.Created, &wj.CreatedBy, &wj.Modified, &wj.ModifiedBy, &wj.PublishUp, &wj.PublishDown, &wj.Attribs, &wj.MiscFrFr, &wj.MiscEnGb, &wj.Logo1, &wj.Logo2, &wj.Logo3, &wj.Logo4, &wj.Logo5, &wj.Group, &wj.Keywords)
	if err != nil {
		return nil, err
	}

	return &wj, nil
}

// WsubJobByID retrieves a row from 'jlabo.wsub_jobs' as a WsubJob.
//
// Generated from index 'wsub_jobs_id_pkey'.
func WsubJobByID(db XODB, id int64) (*WsubJob, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, type, alias, date_start, date_reply, description_fr_FR, description_en_GB, checked_out, checked_out_time, title_fr_FR, title_en_GB, state, created, created_by, modified, modified_by, publish_up, publish_down, attribs, misc_fr_FR, misc_en_GB, logo1, logo2, logo3, logo4, logo5, group, keywords ` +
		`FROM jlabo.wsub_jobs ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	wj := WsubJob{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&wj.ID, &wj.Type, &wj.Alias, &wj.DateStart, &wj.DateReply, &wj.DescriptionFrFr, &wj.DescriptionEnGb, &wj.CheckedOut, &wj.CheckedOutTime, &wj.TitleFrFr, &wj.TitleEnGb, &wj.State, &wj.Created, &wj.CreatedBy, &wj.Modified, &wj.ModifiedBy, &wj.PublishUp, &wj.PublishDown, &wj.Attribs, &wj.MiscFrFr, &wj.MiscEnGb, &wj.Logo1, &wj.Logo2, &wj.Logo3, &wj.Logo4, &wj.Logo5, &wj.Group, &wj.Keywords)
	if err != nil {
		return nil, err
	}

	return &wj, nil
}
