// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

// WsubFinderToken represents a row from 'jlabo.wsub_finder_tokens'.
type WsubFinderToken struct {
	Term     string  `json:"term"`     // term
	Stem     string  `json:"stem"`     // stem
	Common   bool    `json:"common"`   // common
	Phrase   bool    `json:"phrase"`   // phrase
	Weight   float32 `json:"weight"`   // weight
	Context  bool    `json:"context"`  // context
	Language string  `json:"language"` // language
}

// WsubFinderTokensByContext retrieves a row from 'jlabo.wsub_finder_tokens' as a WsubFinderToken.
//
// Generated from index 'idx_context'.
func WsubFinderTokensByContext(db XODB, context bool) ([]*WsubFinderToken, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`term, stem, common, phrase, weight, context, language ` +
		`FROM jlabo.wsub_finder_tokens ` +
		`WHERE context = ?`

	// run query
	XOLog(sqlstr, context)
	q, err := db.Query(sqlstr, context)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubFinderToken{}
	for q.Next() {
		wft := WsubFinderToken{}

		// scan
		err = q.Scan(&wft.Term, &wft.Stem, &wft.Common, &wft.Phrase, &wft.Weight, &wft.Context, &wft.Language)
		if err != nil {
			return nil, err
		}

		res = append(res, &wft)
	}

	return res, nil
}

// WsubFinderTokensByTerm retrieves a row from 'jlabo.wsub_finder_tokens' as a WsubFinderToken.
//
// Generated from index 'idx_word'.
func WsubFinderTokensByTerm(db XODB, term string) ([]*WsubFinderToken, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`term, stem, common, phrase, weight, context, language ` +
		`FROM jlabo.wsub_finder_tokens ` +
		`WHERE term = ?`

	// run query
	XOLog(sqlstr, term)
	q, err := db.Query(sqlstr, term)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubFinderToken{}
	for q.Next() {
		wft := WsubFinderToken{}

		// scan
		err = q.Scan(&wft.Term, &wft.Stem, &wft.Common, &wft.Phrase, &wft.Weight, &wft.Context, &wft.Language)
		if err != nil {
			return nil, err
		}

		res = append(res, &wft)
	}

	return res, nil
}
