// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// WsubUserUsergroupMap represents a row from 'jlabo.wsub_user_usergroup_map'.
type WsubUserUsergroupMap struct {
	UserID  uint `json:"user_id"`  // user_id
	GroupID uint `json:"group_id"` // group_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubUserUsergroupMap exists in the database.
func (wuum *WsubUserUsergroupMap) Exists() bool {
	return wuum._exists
}

// Deleted provides information if the WsubUserUsergroupMap has been deleted from the database.
func (wuum *WsubUserUsergroupMap) Deleted() bool {
	return wuum._deleted
}

// Insert inserts the WsubUserUsergroupMap to the database.
func (wuum *WsubUserUsergroupMap) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wuum._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO jlabo.wsub_user_usergroup_map (` +
		`user_id, group_id` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wuum.UserID, wuum.GroupID)
	_, err = db.Exec(sqlstr, wuum.UserID, wuum.GroupID)
	if err != nil {
		return err
	}

	// set existence
	wuum._exists = true

	return nil
}

// Update statements omitted due to lack of fields other than primary key

// Delete deletes the WsubUserUsergroupMap from the database.
func (wuum *WsubUserUsergroupMap) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wuum._exists {
		return nil
	}

	// if deleted, bail
	if wuum._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM jlabo.wsub_user_usergroup_map WHERE user_id = ? AND group_id = ?`

	// run query
	XOLog(sqlstr, wuum.UserID, wuum.GroupID)
	_, err = db.Exec(sqlstr, wuum.UserID, wuum.GroupID)
	if err != nil {
		return err
	}

	// set deleted
	wuum._deleted = true

	return nil
}

// WsubUserUsergroupMapByGroupID retrieves a row from 'jlabo.wsub_user_usergroup_map' as a WsubUserUsergroupMap.
//
// Generated from index 'wsub_user_usergroup_map_group_id_pkey'.
func WsubUserUsergroupMapByGroupID(db XODB, groupID uint) (*WsubUserUsergroupMap, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, group_id ` +
		`FROM jlabo.wsub_user_usergroup_map ` +
		`WHERE group_id = ?`

	// run query
	XOLog(sqlstr, groupID)
	wuum := WsubUserUsergroupMap{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, groupID).Scan(&wuum.UserID, &wuum.GroupID)
	if err != nil {
		return nil, err
	}

	return &wuum, nil
}
