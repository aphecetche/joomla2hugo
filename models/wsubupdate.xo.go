// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// WsubUpdate represents a row from 'jlabo.wsub_updates'.
type WsubUpdate struct {
	UpdateID     int            `json:"update_id"`      // update_id
	UpdateSiteID sql.NullInt64  `json:"update_site_id"` // update_site_id
	ExtensionID  sql.NullInt64  `json:"extension_id"`   // extension_id
	Name         sql.NullString `json:"name"`           // name
	Description  string         `json:"description"`    // description
	Element      sql.NullString `json:"element"`        // element
	Type         sql.NullString `json:"type"`           // type
	Folder       sql.NullString `json:"folder"`         // folder
	ClientID     sql.NullInt64  `json:"client_id"`      // client_id
	Version      sql.NullString `json:"version"`        // version
	Data         string         `json:"data"`           // data
	Detailsurl   string         `json:"detailsurl"`     // detailsurl
	Infourl      string         `json:"infourl"`        // infourl
	ExtraQuery   sql.NullString `json:"extra_query"`    // extra_query

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubUpdate exists in the database.
func (wu *WsubUpdate) Exists() bool {
	return wu._exists
}

// Deleted provides information if the WsubUpdate has been deleted from the database.
func (wu *WsubUpdate) Deleted() bool {
	return wu._deleted
}

// Insert inserts the WsubUpdate to the database.
func (wu *WsubUpdate) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wu._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO jlabo.wsub_updates (` +
		`update_site_id, extension_id, name, description, element, type, folder, client_id, version, data, detailsurl, infourl, extra_query` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wu.UpdateSiteID, wu.ExtensionID, wu.Name, wu.Description, wu.Element, wu.Type, wu.Folder, wu.ClientID, wu.Version, wu.Data, wu.Detailsurl, wu.Infourl, wu.ExtraQuery)
	res, err := db.Exec(sqlstr, wu.UpdateSiteID, wu.ExtensionID, wu.Name, wu.Description, wu.Element, wu.Type, wu.Folder, wu.ClientID, wu.Version, wu.Data, wu.Detailsurl, wu.Infourl, wu.ExtraQuery)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	wu.UpdateID = int(id)
	wu._exists = true

	return nil
}

// Update updates the WsubUpdate in the database.
func (wu *WsubUpdate) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wu._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wu._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE jlabo.wsub_updates SET ` +
		`update_site_id = ?, extension_id = ?, name = ?, description = ?, element = ?, type = ?, folder = ?, client_id = ?, version = ?, data = ?, detailsurl = ?, infourl = ?, extra_query = ?` +
		` WHERE update_id = ?`

	// run query
	XOLog(sqlstr, wu.UpdateSiteID, wu.ExtensionID, wu.Name, wu.Description, wu.Element, wu.Type, wu.Folder, wu.ClientID, wu.Version, wu.Data, wu.Detailsurl, wu.Infourl, wu.ExtraQuery, wu.UpdateID)
	_, err = db.Exec(sqlstr, wu.UpdateSiteID, wu.ExtensionID, wu.Name, wu.Description, wu.Element, wu.Type, wu.Folder, wu.ClientID, wu.Version, wu.Data, wu.Detailsurl, wu.Infourl, wu.ExtraQuery, wu.UpdateID)
	return err
}

// Save saves the WsubUpdate to the database.
func (wu *WsubUpdate) Save(db XODB) error {
	if wu.Exists() {
		return wu.Update(db)
	}

	return wu.Insert(db)
}

// Delete deletes the WsubUpdate from the database.
func (wu *WsubUpdate) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wu._exists {
		return nil
	}

	// if deleted, bail
	if wu._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM jlabo.wsub_updates WHERE update_id = ?`

	// run query
	XOLog(sqlstr, wu.UpdateID)
	_, err = db.Exec(sqlstr, wu.UpdateID)
	if err != nil {
		return err
	}

	// set deleted
	wu._deleted = true

	return nil
}

// WsubUpdateByUpdateID retrieves a row from 'jlabo.wsub_updates' as a WsubUpdate.
//
// Generated from index 'wsub_updates_update_id_pkey'.
func WsubUpdateByUpdateID(db XODB, updateID int) (*WsubUpdate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`update_id, update_site_id, extension_id, name, description, element, type, folder, client_id, version, data, detailsurl, infourl, extra_query ` +
		`FROM jlabo.wsub_updates ` +
		`WHERE update_id = ?`

	// run query
	XOLog(sqlstr, updateID)
	wu := WsubUpdate{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, updateID).Scan(&wu.UpdateID, &wu.UpdateSiteID, &wu.ExtensionID, &wu.Name, &wu.Description, &wu.Element, &wu.Type, &wu.Folder, &wu.ClientID, &wu.Version, &wu.Data, &wu.Detailsurl, &wu.Infourl, &wu.ExtraQuery)
	if err != nil {
		return nil, err
	}

	return &wu, nil
}
