// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// WsubEvent represents a row from 'jlabo.wsub_events'.
type WsubEvent struct {
	ID             int64     `json:"id"`               // id
	DateStart      time.Time `json:"date_start"`       // date_start
	DateEnd        time.Time `json:"date_end"`         // date_end
	Location       string    `json:"location"`         // location
	Alias          string    `json:"alias"`            // alias
	PreSummary     string    `json:"pre_summary"`      // pre_summary
	PostSummary    string    `json:"post_summary"`     // post_summary
	CheckedOut     int       `json:"checked_out"`      // checked_out
	CheckedOutTime time.Time `json:"checked_out_time"` // checked_out_time
	Title          string    `json:"title"`            // title
	URLMoreInfo    string    `json:"url_more_info"`    // url_more_info
	State          int8      `json:"state"`            // state
	Created        time.Time `json:"created"`          // created
	CreatedBy      int       `json:"created_by"`       // created_by
	Modified       time.Time `json:"modified"`         // modified
	ModifiedBy     int       `json:"modified_by"`      // modified_by
	PublishUp      time.Time `json:"publish_up"`       // publish_up
	PublishDown    time.Time `json:"publish_down"`     // publish_down
	Attribs        string    `json:"attribs"`          // attribs

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubEvent exists in the database.
func (we *WsubEvent) Exists() bool {
	return we._exists
}

// Deleted provides information if the WsubEvent has been deleted from the database.
func (we *WsubEvent) Deleted() bool {
	return we._deleted
}

// Insert inserts the WsubEvent to the database.
func (we *WsubEvent) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if we._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO jlabo.wsub_events (` +
		`date_start, date_end, location, alias, pre_summary, post_summary, checked_out, checked_out_time, title, url_more_info, state, created, created_by, modified, modified_by, publish_up, publish_down, attribs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, we.DateStart, we.DateEnd, we.Location, we.Alias, we.PreSummary, we.PostSummary, we.CheckedOut, we.CheckedOutTime, we.Title, we.URLMoreInfo, we.State, we.Created, we.CreatedBy, we.Modified, we.ModifiedBy, we.PublishUp, we.PublishDown, we.Attribs)
	res, err := db.Exec(sqlstr, we.DateStart, we.DateEnd, we.Location, we.Alias, we.PreSummary, we.PostSummary, we.CheckedOut, we.CheckedOutTime, we.Title, we.URLMoreInfo, we.State, we.Created, we.CreatedBy, we.Modified, we.ModifiedBy, we.PublishUp, we.PublishDown, we.Attribs)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	we.ID = int64(id)
	we._exists = true

	return nil
}

// Update updates the WsubEvent in the database.
func (we *WsubEvent) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !we._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if we._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE jlabo.wsub_events SET ` +
		`date_start = ?, date_end = ?, location = ?, alias = ?, pre_summary = ?, post_summary = ?, checked_out = ?, checked_out_time = ?, title = ?, url_more_info = ?, state = ?, created = ?, created_by = ?, modified = ?, modified_by = ?, publish_up = ?, publish_down = ?, attribs = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, we.DateStart, we.DateEnd, we.Location, we.Alias, we.PreSummary, we.PostSummary, we.CheckedOut, we.CheckedOutTime, we.Title, we.URLMoreInfo, we.State, we.Created, we.CreatedBy, we.Modified, we.ModifiedBy, we.PublishUp, we.PublishDown, we.Attribs, we.ID)
	_, err = db.Exec(sqlstr, we.DateStart, we.DateEnd, we.Location, we.Alias, we.PreSummary, we.PostSummary, we.CheckedOut, we.CheckedOutTime, we.Title, we.URLMoreInfo, we.State, we.Created, we.CreatedBy, we.Modified, we.ModifiedBy, we.PublishUp, we.PublishDown, we.Attribs, we.ID)
	return err
}

// Save saves the WsubEvent to the database.
func (we *WsubEvent) Save(db XODB) error {
	if we.Exists() {
		return we.Update(db)
	}

	return we.Insert(db)
}

// Delete deletes the WsubEvent from the database.
func (we *WsubEvent) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !we._exists {
		return nil
	}

	// if deleted, bail
	if we._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM jlabo.wsub_events WHERE id = ?`

	// run query
	XOLog(sqlstr, we.ID)
	_, err = db.Exec(sqlstr, we.ID)
	if err != nil {
		return err
	}

	// set deleted
	we._deleted = true

	return nil
}

// WsubEventsByAlias retrieves a row from 'jlabo.wsub_events' as a WsubEvent.
//
// Generated from index 'alias'.
func WsubEventsByAlias(db XODB, alias string) ([]*WsubEvent, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, date_start, date_end, location, alias, pre_summary, post_summary, checked_out, checked_out_time, title, url_more_info, state, created, created_by, modified, modified_by, publish_up, publish_down, attribs ` +
		`FROM jlabo.wsub_events ` +
		`WHERE alias = ?`

	// run query
	XOLog(sqlstr, alias)
	q, err := db.Query(sqlstr, alias)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubEvent{}
	for q.Next() {
		we := WsubEvent{
			_exists: true,
		}

		// scan
		err = q.Scan(&we.ID, &we.DateStart, &we.DateEnd, &we.Location, &we.Alias, &we.PreSummary, &we.PostSummary, &we.CheckedOut, &we.CheckedOutTime, &we.Title, &we.URLMoreInfo, &we.State, &we.Created, &we.CreatedBy, &we.Modified, &we.ModifiedBy, &we.PublishUp, &we.PublishDown, &we.Attribs)
		if err != nil {
			return nil, err
		}

		res = append(res, &we)
	}

	return res, nil
}

// WsubEventByID retrieves a row from 'jlabo.wsub_events' as a WsubEvent.
//
// Generated from index 'id'.
func WsubEventByID(db XODB, id int64) (*WsubEvent, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, date_start, date_end, location, alias, pre_summary, post_summary, checked_out, checked_out_time, title, url_more_info, state, created, created_by, modified, modified_by, publish_up, publish_down, attribs ` +
		`FROM jlabo.wsub_events ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	we := WsubEvent{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&we.ID, &we.DateStart, &we.DateEnd, &we.Location, &we.Alias, &we.PreSummary, &we.PostSummary, &we.CheckedOut, &we.CheckedOutTime, &we.Title, &we.URLMoreInfo, &we.State, &we.Created, &we.CreatedBy, &we.Modified, &we.ModifiedBy, &we.PublishUp, &we.PublishDown, &we.Attribs)
	if err != nil {
		return nil, err
	}

	return &we, nil
}

// WsubEventByID retrieves a row from 'jlabo.wsub_events' as a WsubEvent.
//
// Generated from index 'wsub_events_id_pkey'.
func WsubEventByID(db XODB, id int64) (*WsubEvent, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, date_start, date_end, location, alias, pre_summary, post_summary, checked_out, checked_out_time, title, url_more_info, state, created, created_by, modified, modified_by, publish_up, publish_down, attribs ` +
		`FROM jlabo.wsub_events ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	we := WsubEvent{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&we.ID, &we.DateStart, &we.DateEnd, &we.Location, &we.Alias, &we.PreSummary, &we.PostSummary, &we.CheckedOut, &we.CheckedOutTime, &we.Title, &we.URLMoreInfo, &we.State, &we.Created, &we.CreatedBy, &we.Modified, &we.ModifiedBy, &we.PublishUp, &we.PublishDown, &we.Attribs)
	if err != nil {
		return nil, err
	}

	return &we, nil
}
