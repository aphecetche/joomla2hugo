// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// WsubModule represents a row from 'jlabo.wsub_modules'.
type WsubModule struct {
	ID             int            `json:"id"`               // id
	AssetID        uint           `json:"asset_id"`         // asset_id
	Title          string         `json:"title"`            // title
	Note           string         `json:"note"`             // note
	Content        string         `json:"content"`          // content
	Ordering       int            `json:"ordering"`         // ordering
	Position       string         `json:"position"`         // position
	CheckedOut     uint           `json:"checked_out"`      // checked_out
	CheckedOutTime time.Time      `json:"checked_out_time"` // checked_out_time
	PublishUp      time.Time      `json:"publish_up"`       // publish_up
	PublishDown    time.Time      `json:"publish_down"`     // publish_down
	Published      bool           `json:"published"`        // published
	Module         sql.NullString `json:"module"`           // module
	Access         uint           `json:"access"`           // access
	Showtitle      int8           `json:"showtitle"`        // showtitle
	Params         string         `json:"params"`           // params
	ClientID       int8           `json:"client_id"`        // client_id
	Language       string         `json:"language"`         // language

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubModule exists in the database.
func (wm *WsubModule) Exists() bool {
	return wm._exists
}

// Deleted provides information if the WsubModule has been deleted from the database.
func (wm *WsubModule) Deleted() bool {
	return wm._deleted
}

// Insert inserts the WsubModule to the database.
func (wm *WsubModule) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO jlabo.wsub_modules (` +
		`asset_id, title, note, content, ordering, position, checked_out, checked_out_time, publish_up, publish_down, published, module, access, showtitle, params, client_id, language` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wm.AssetID, wm.Title, wm.Note, wm.Content, wm.Ordering, wm.Position, wm.CheckedOut, wm.CheckedOutTime, wm.PublishUp, wm.PublishDown, wm.Published, wm.Module, wm.Access, wm.Showtitle, wm.Params, wm.ClientID, wm.Language)
	res, err := db.Exec(sqlstr, wm.AssetID, wm.Title, wm.Note, wm.Content, wm.Ordering, wm.Position, wm.CheckedOut, wm.CheckedOutTime, wm.PublishUp, wm.PublishDown, wm.Published, wm.Module, wm.Access, wm.Showtitle, wm.Params, wm.ClientID, wm.Language)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	wm.ID = int(id)
	wm._exists = true

	return nil
}

// Update updates the WsubModule in the database.
func (wm *WsubModule) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE jlabo.wsub_modules SET ` +
		`asset_id = ?, title = ?, note = ?, content = ?, ordering = ?, position = ?, checked_out = ?, checked_out_time = ?, publish_up = ?, publish_down = ?, published = ?, module = ?, access = ?, showtitle = ?, params = ?, client_id = ?, language = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, wm.AssetID, wm.Title, wm.Note, wm.Content, wm.Ordering, wm.Position, wm.CheckedOut, wm.CheckedOutTime, wm.PublishUp, wm.PublishDown, wm.Published, wm.Module, wm.Access, wm.Showtitle, wm.Params, wm.ClientID, wm.Language, wm.ID)
	_, err = db.Exec(sqlstr, wm.AssetID, wm.Title, wm.Note, wm.Content, wm.Ordering, wm.Position, wm.CheckedOut, wm.CheckedOutTime, wm.PublishUp, wm.PublishDown, wm.Published, wm.Module, wm.Access, wm.Showtitle, wm.Params, wm.ClientID, wm.Language, wm.ID)
	return err
}

// Save saves the WsubModule to the database.
func (wm *WsubModule) Save(db XODB) error {
	if wm.Exists() {
		return wm.Update(db)
	}

	return wm.Insert(db)
}

// Delete deletes the WsubModule from the database.
func (wm *WsubModule) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wm._exists {
		return nil
	}

	// if deleted, bail
	if wm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM jlabo.wsub_modules WHERE id = ?`

	// run query
	XOLog(sqlstr, wm.ID)
	_, err = db.Exec(sqlstr, wm.ID)
	if err != nil {
		return err
	}

	// set deleted
	wm._deleted = true

	return nil
}

// WsubModulesByLanguage retrieves a row from 'jlabo.wsub_modules' as a WsubModule.
//
// Generated from index 'idx_language'.
func WsubModulesByLanguage(db XODB, language string) ([]*WsubModule, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, asset_id, title, note, content, ordering, position, checked_out, checked_out_time, publish_up, publish_down, published, module, access, showtitle, params, client_id, language ` +
		`FROM jlabo.wsub_modules ` +
		`WHERE language = ?`

	// run query
	XOLog(sqlstr, language)
	q, err := db.Query(sqlstr, language)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubModule{}
	for q.Next() {
		wm := WsubModule{
			_exists: true,
		}

		// scan
		err = q.Scan(&wm.ID, &wm.AssetID, &wm.Title, &wm.Note, &wm.Content, &wm.Ordering, &wm.Position, &wm.CheckedOut, &wm.CheckedOutTime, &wm.PublishUp, &wm.PublishDown, &wm.Published, &wm.Module, &wm.Access, &wm.Showtitle, &wm.Params, &wm.ClientID, &wm.Language)
		if err != nil {
			return nil, err
		}

		res = append(res, &wm)
	}

	return res, nil
}

// WsubModulesByModulePublished retrieves a row from 'jlabo.wsub_modules' as a WsubModule.
//
// Generated from index 'newsfeeds'.
func WsubModulesByModulePublished(db XODB, module sql.NullString, published bool) ([]*WsubModule, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, asset_id, title, note, content, ordering, position, checked_out, checked_out_time, publish_up, publish_down, published, module, access, showtitle, params, client_id, language ` +
		`FROM jlabo.wsub_modules ` +
		`WHERE module = ? AND published = ?`

	// run query
	XOLog(sqlstr, module, published)
	q, err := db.Query(sqlstr, module, published)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubModule{}
	for q.Next() {
		wm := WsubModule{
			_exists: true,
		}

		// scan
		err = q.Scan(&wm.ID, &wm.AssetID, &wm.Title, &wm.Note, &wm.Content, &wm.Ordering, &wm.Position, &wm.CheckedOut, &wm.CheckedOutTime, &wm.PublishUp, &wm.PublishDown, &wm.Published, &wm.Module, &wm.Access, &wm.Showtitle, &wm.Params, &wm.ClientID, &wm.Language)
		if err != nil {
			return nil, err
		}

		res = append(res, &wm)
	}

	return res, nil
}

// WsubModulesByPublishedAccess retrieves a row from 'jlabo.wsub_modules' as a WsubModule.
//
// Generated from index 'published'.
func WsubModulesByPublishedAccess(db XODB, published bool, access uint) ([]*WsubModule, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, asset_id, title, note, content, ordering, position, checked_out, checked_out_time, publish_up, publish_down, published, module, access, showtitle, params, client_id, language ` +
		`FROM jlabo.wsub_modules ` +
		`WHERE published = ? AND access = ?`

	// run query
	XOLog(sqlstr, published, access)
	q, err := db.Query(sqlstr, published, access)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubModule{}
	for q.Next() {
		wm := WsubModule{
			_exists: true,
		}

		// scan
		err = q.Scan(&wm.ID, &wm.AssetID, &wm.Title, &wm.Note, &wm.Content, &wm.Ordering, &wm.Position, &wm.CheckedOut, &wm.CheckedOutTime, &wm.PublishUp, &wm.PublishDown, &wm.Published, &wm.Module, &wm.Access, &wm.Showtitle, &wm.Params, &wm.ClientID, &wm.Language)
		if err != nil {
			return nil, err
		}

		res = append(res, &wm)
	}

	return res, nil
}

// WsubModuleByID retrieves a row from 'jlabo.wsub_modules' as a WsubModule.
//
// Generated from index 'wsub_modules_id_pkey'.
func WsubModuleByID(db XODB, id int) (*WsubModule, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, asset_id, title, note, content, ordering, position, checked_out, checked_out_time, publish_up, publish_down, published, module, access, showtitle, params, client_id, language ` +
		`FROM jlabo.wsub_modules ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	wm := WsubModule{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&wm.ID, &wm.AssetID, &wm.Title, &wm.Note, &wm.Content, &wm.Ordering, &wm.Position, &wm.CheckedOut, &wm.CheckedOutTime, &wm.PublishUp, &wm.PublishDown, &wm.Published, &wm.Module, &wm.Access, &wm.Showtitle, &wm.Params, &wm.ClientID, &wm.Language)
	if err != nil {
		return nil, err
	}

	return &wm, nil
}
