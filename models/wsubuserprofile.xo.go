// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// WsubUserProfile represents a row from 'jlabo.wsub_user_profiles'.
type WsubUserProfile struct {
	UserID       int    `json:"user_id"`       // user_id
	ProfileKey   string `json:"profile_key"`   // profile_key
	ProfileValue string `json:"profile_value"` // profile_value
	Ordering     int    `json:"ordering"`      // ordering

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubUserProfile exists in the database.
func (wup *WsubUserProfile) Exists() bool {
	return wup._exists
}

// Deleted provides information if the WsubUserProfile has been deleted from the database.
func (wup *WsubUserProfile) Deleted() bool {
	return wup._deleted
}

// Insert inserts the WsubUserProfile to the database.
func (wup *WsubUserProfile) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wup._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO jlabo.wsub_user_profiles (` +
		`user_id, profile_key, profile_value, ordering` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wup.UserID, wup.ProfileKey, wup.ProfileValue, wup.Ordering)
	_, err = db.Exec(sqlstr, wup.UserID, wup.ProfileKey, wup.ProfileValue, wup.Ordering)
	if err != nil {
		return err
	}

	// set existence
	wup._exists = true

	return nil
}

// Update updates the WsubUserProfile in the database.
func (wup *WsubUserProfile) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wup._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wup._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE jlabo.wsub_user_profiles SET ` +
		`profile_value = ?, ordering = ?` +
		` WHERE user_id = ? AND profile_key = ?`

	// run query
	XOLog(sqlstr, wup.ProfileValue, wup.Ordering, wup.UserID, wup.ProfileKey)
	_, err = db.Exec(sqlstr, wup.ProfileValue, wup.Ordering, wup.UserID, wup.ProfileKey)
	return err
}

// Save saves the WsubUserProfile to the database.
func (wup *WsubUserProfile) Save(db XODB) error {
	if wup.Exists() {
		return wup.Update(db)
	}

	return wup.Insert(db)
}

// Delete deletes the WsubUserProfile from the database.
func (wup *WsubUserProfile) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wup._exists {
		return nil
	}

	// if deleted, bail
	if wup._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM jlabo.wsub_user_profiles WHERE user_id = ? AND profile_key = ?`

	// run query
	XOLog(sqlstr, wup.UserID, wup.ProfileKey)
	_, err = db.Exec(sqlstr, wup.UserID, wup.ProfileKey)
	if err != nil {
		return err
	}

	// set deleted
	wup._deleted = true

	return nil
}

// WsubUserProfileByUserIDProfileKey retrieves a row from 'jlabo.wsub_user_profiles' as a WsubUserProfile.
//
// Generated from index 'idx_user_id_profile_key'.
func WsubUserProfileByUserIDProfileKey(db XODB, userID int, profileKey string) (*WsubUserProfile, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, profile_key, profile_value, ordering ` +
		`FROM jlabo.wsub_user_profiles ` +
		`WHERE user_id = ? AND profile_key = ?`

	// run query
	XOLog(sqlstr, userID, profileKey)
	wup := WsubUserProfile{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, userID, profileKey).Scan(&wup.UserID, &wup.ProfileKey, &wup.ProfileValue, &wup.Ordering)
	if err != nil {
		return nil, err
	}

	return &wup, nil
}

// WsubUserProfileByProfileKey retrieves a row from 'jlabo.wsub_user_profiles' as a WsubUserProfile.
//
// Generated from index 'wsub_user_profiles_profile_key_pkey'.
func WsubUserProfileByProfileKey(db XODB, profileKey string) (*WsubUserProfile, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, profile_key, profile_value, ordering ` +
		`FROM jlabo.wsub_user_profiles ` +
		`WHERE profile_key = ?`

	// run query
	XOLog(sqlstr, profileKey)
	wup := WsubUserProfile{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, profileKey).Scan(&wup.UserID, &wup.ProfileKey, &wup.ProfileValue, &wup.Ordering)
	if err != nil {
		return nil, err
	}

	return &wup, nil
}
