// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// WsubContentFrontpage represents a row from 'jlabo.wsub_content_frontpage'.
type WsubContentFrontpage struct {
	ContentID int `json:"content_id"` // content_id
	Ordering  int `json:"ordering"`   // ordering

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubContentFrontpage exists in the database.
func (wcf *WsubContentFrontpage) Exists() bool {
	return wcf._exists
}

// Deleted provides information if the WsubContentFrontpage has been deleted from the database.
func (wcf *WsubContentFrontpage) Deleted() bool {
	return wcf._deleted
}

// Insert inserts the WsubContentFrontpage to the database.
func (wcf *WsubContentFrontpage) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wcf._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO jlabo.wsub_content_frontpage (` +
		`content_id, ordering` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wcf.ContentID, wcf.Ordering)
	_, err = db.Exec(sqlstr, wcf.ContentID, wcf.Ordering)
	if err != nil {
		return err
	}

	// set existence
	wcf._exists = true

	return nil
}

// Update updates the WsubContentFrontpage in the database.
func (wcf *WsubContentFrontpage) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wcf._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wcf._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE jlabo.wsub_content_frontpage SET ` +
		`ordering = ?` +
		` WHERE content_id = ?`

	// run query
	XOLog(sqlstr, wcf.Ordering, wcf.ContentID)
	_, err = db.Exec(sqlstr, wcf.Ordering, wcf.ContentID)
	return err
}

// Save saves the WsubContentFrontpage to the database.
func (wcf *WsubContentFrontpage) Save(db XODB) error {
	if wcf.Exists() {
		return wcf.Update(db)
	}

	return wcf.Insert(db)
}

// Delete deletes the WsubContentFrontpage from the database.
func (wcf *WsubContentFrontpage) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wcf._exists {
		return nil
	}

	// if deleted, bail
	if wcf._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM jlabo.wsub_content_frontpage WHERE content_id = ?`

	// run query
	XOLog(sqlstr, wcf.ContentID)
	_, err = db.Exec(sqlstr, wcf.ContentID)
	if err != nil {
		return err
	}

	// set deleted
	wcf._deleted = true

	return nil
}

// WsubContentFrontpageByContentID retrieves a row from 'jlabo.wsub_content_frontpage' as a WsubContentFrontpage.
//
// Generated from index 'wsub_content_frontpage_content_id_pkey'.
func WsubContentFrontpageByContentID(db XODB, contentID int) (*WsubContentFrontpage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`content_id, ordering ` +
		`FROM jlabo.wsub_content_frontpage ` +
		`WHERE content_id = ?`

	// run query
	XOLog(sqlstr, contentID)
	wcf := WsubContentFrontpage{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, contentID).Scan(&wcf.ContentID, &wcf.Ordering)
	if err != nil {
		return nil, err
	}

	return &wcf, nil
}
