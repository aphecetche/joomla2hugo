// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// WsubOsdownloadsEmail represents a row from 'jlabo.wsub_osdownloads_emails'.
type WsubOsdownloadsEmail struct {
	ID             int       `json:"id"`              // id
	Email          string    `json:"email"`           // email
	DocumentID     int       `json:"document_id"`     // document_id
	DownloadedDate time.Time `json:"downloaded_date"` // downloaded_date

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubOsdownloadsEmail exists in the database.
func (woe *WsubOsdownloadsEmail) Exists() bool {
	return woe._exists
}

// Deleted provides information if the WsubOsdownloadsEmail has been deleted from the database.
func (woe *WsubOsdownloadsEmail) Deleted() bool {
	return woe._deleted
}

// Insert inserts the WsubOsdownloadsEmail to the database.
func (woe *WsubOsdownloadsEmail) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if woe._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO jlabo.wsub_osdownloads_emails (` +
		`email, document_id, downloaded_date` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, woe.Email, woe.DocumentID, woe.DownloadedDate)
	res, err := db.Exec(sqlstr, woe.Email, woe.DocumentID, woe.DownloadedDate)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	woe.ID = int(id)
	woe._exists = true

	return nil
}

// Update updates the WsubOsdownloadsEmail in the database.
func (woe *WsubOsdownloadsEmail) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !woe._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if woe._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE jlabo.wsub_osdownloads_emails SET ` +
		`email = ?, document_id = ?, downloaded_date = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, woe.Email, woe.DocumentID, woe.DownloadedDate, woe.ID)
	_, err = db.Exec(sqlstr, woe.Email, woe.DocumentID, woe.DownloadedDate, woe.ID)
	return err
}

// Save saves the WsubOsdownloadsEmail to the database.
func (woe *WsubOsdownloadsEmail) Save(db XODB) error {
	if woe.Exists() {
		return woe.Update(db)
	}

	return woe.Insert(db)
}

// Delete deletes the WsubOsdownloadsEmail from the database.
func (woe *WsubOsdownloadsEmail) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !woe._exists {
		return nil
	}

	// if deleted, bail
	if woe._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM jlabo.wsub_osdownloads_emails WHERE id = ?`

	// run query
	XOLog(sqlstr, woe.ID)
	_, err = db.Exec(sqlstr, woe.ID)
	if err != nil {
		return err
	}

	// set deleted
	woe._deleted = true

	return nil
}

// WsubOsdownloadsEmailByID retrieves a row from 'jlabo.wsub_osdownloads_emails' as a WsubOsdownloadsEmail.
//
// Generated from index 'wsub_osdownloads_emails_id_pkey'.
func WsubOsdownloadsEmailByID(db XODB, id int) (*WsubOsdownloadsEmail, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, email, document_id, downloaded_date ` +
		`FROM jlabo.wsub_osdownloads_emails ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	woe := WsubOsdownloadsEmail{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&woe.ID, &woe.Email, &woe.DocumentID, &woe.DownloadedDate)
	if err != nil {
		return nil, err
	}

	return &woe, nil
}
