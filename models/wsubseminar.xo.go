// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// WsubSeminar represents a row from 'jlabo.wsub_seminars'.
type WsubSeminar struct {
	ID                 int64     `json:"id"`                   // id
	Author             string    `json:"author"`               // author
	AuthorURL          string    `json:"author_url"`           // author_url
	Date               time.Time `json:"date"`                 // date
	Location           string    `json:"location"`             // location
	Alias              string    `json:"alias"`                // alias
	Summary            string    `json:"summary"`              // summary
	CheckedOut         int       `json:"checked_out"`          // checked_out
	CheckedOutTime     time.Time `json:"checked_out_time"`     // checked_out_time
	Title              string    `json:"title"`                // title
	AuthorFiliation    string    `json:"author_filiation"`     // author_filiation
	AuthorFiliationURL string    `json:"author_filiation_url"` // author_filiation_url
	Type               string    `json:"type"`                 // type
	Comment            string    `json:"comment"`              // comment
	State              int8      `json:"state"`                // state
	Created            time.Time `json:"created"`              // created
	CreatedBy          int       `json:"created_by"`           // created_by
	Modified           time.Time `json:"modified"`             // modified
	ModifiedBy         int       `json:"modified_by"`          // modified_by
	PublishUp          time.Time `json:"publish_up"`           // publish_up
	PublishDown        time.Time `json:"publish_down"`         // publish_down
	Attribs            string    `json:"attribs"`              // attribs

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubSeminar exists in the database.
func (ws *WsubSeminar) Exists() bool {
	return ws._exists
}

// Deleted provides information if the WsubSeminar has been deleted from the database.
func (ws *WsubSeminar) Deleted() bool {
	return ws._deleted
}

// Insert inserts the WsubSeminar to the database.
func (ws *WsubSeminar) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ws._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO jlabo.wsub_seminars (` +
		`author, author_url, date, location, alias, summary, checked_out, checked_out_time, title, author_filiation, author_filiation_url, type, comment, state, created, created_by, modified, modified_by, publish_up, publish_down, attribs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ws.Author, ws.AuthorURL, ws.Date, ws.Location, ws.Alias, ws.Summary, ws.CheckedOut, ws.CheckedOutTime, ws.Title, ws.AuthorFiliation, ws.AuthorFiliationURL, ws.Type, ws.Comment, ws.State, ws.Created, ws.CreatedBy, ws.Modified, ws.ModifiedBy, ws.PublishUp, ws.PublishDown, ws.Attribs)
	res, err := db.Exec(sqlstr, ws.Author, ws.AuthorURL, ws.Date, ws.Location, ws.Alias, ws.Summary, ws.CheckedOut, ws.CheckedOutTime, ws.Title, ws.AuthorFiliation, ws.AuthorFiliationURL, ws.Type, ws.Comment, ws.State, ws.Created, ws.CreatedBy, ws.Modified, ws.ModifiedBy, ws.PublishUp, ws.PublishDown, ws.Attribs)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ws.ID = int64(id)
	ws._exists = true

	return nil
}

// Update updates the WsubSeminar in the database.
func (ws *WsubSeminar) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ws._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ws._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE jlabo.wsub_seminars SET ` +
		`author = ?, author_url = ?, date = ?, location = ?, alias = ?, summary = ?, checked_out = ?, checked_out_time = ?, title = ?, author_filiation = ?, author_filiation_url = ?, type = ?, comment = ?, state = ?, created = ?, created_by = ?, modified = ?, modified_by = ?, publish_up = ?, publish_down = ?, attribs = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ws.Author, ws.AuthorURL, ws.Date, ws.Location, ws.Alias, ws.Summary, ws.CheckedOut, ws.CheckedOutTime, ws.Title, ws.AuthorFiliation, ws.AuthorFiliationURL, ws.Type, ws.Comment, ws.State, ws.Created, ws.CreatedBy, ws.Modified, ws.ModifiedBy, ws.PublishUp, ws.PublishDown, ws.Attribs, ws.ID)
	_, err = db.Exec(sqlstr, ws.Author, ws.AuthorURL, ws.Date, ws.Location, ws.Alias, ws.Summary, ws.CheckedOut, ws.CheckedOutTime, ws.Title, ws.AuthorFiliation, ws.AuthorFiliationURL, ws.Type, ws.Comment, ws.State, ws.Created, ws.CreatedBy, ws.Modified, ws.ModifiedBy, ws.PublishUp, ws.PublishDown, ws.Attribs, ws.ID)
	return err
}

// Save saves the WsubSeminar to the database.
func (ws *WsubSeminar) Save(db XODB) error {
	if ws.Exists() {
		return ws.Update(db)
	}

	return ws.Insert(db)
}

// Delete deletes the WsubSeminar from the database.
func (ws *WsubSeminar) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ws._exists {
		return nil
	}

	// if deleted, bail
	if ws._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM jlabo.wsub_seminars WHERE id = ?`

	// run query
	XOLog(sqlstr, ws.ID)
	_, err = db.Exec(sqlstr, ws.ID)
	if err != nil {
		return err
	}

	// set deleted
	ws._deleted = true

	return nil
}

// WsubSeminarsByAlias retrieves a row from 'jlabo.wsub_seminars' as a WsubSeminar.
//
// Generated from index 'alias'.
func WsubSeminarsByAlias(db XODB, alias string) ([]*WsubSeminar, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, author, author_url, date, location, alias, summary, checked_out, checked_out_time, title, author_filiation, author_filiation_url, type, comment, state, created, created_by, modified, modified_by, publish_up, publish_down, attribs ` +
		`FROM jlabo.wsub_seminars ` +
		`WHERE alias = ?`

	// run query
	XOLog(sqlstr, alias)
	q, err := db.Query(sqlstr, alias)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubSeminar{}
	for q.Next() {
		ws := WsubSeminar{
			_exists: true,
		}

		// scan
		err = q.Scan(&ws.ID, &ws.Author, &ws.AuthorURL, &ws.Date, &ws.Location, &ws.Alias, &ws.Summary, &ws.CheckedOut, &ws.CheckedOutTime, &ws.Title, &ws.AuthorFiliation, &ws.AuthorFiliationURL, &ws.Type, &ws.Comment, &ws.State, &ws.Created, &ws.CreatedBy, &ws.Modified, &ws.ModifiedBy, &ws.PublishUp, &ws.PublishDown, &ws.Attribs)
		if err != nil {
			return nil, err
		}

		res = append(res, &ws)
	}

	return res, nil
}

// WsubSeminarByID retrieves a row from 'jlabo.wsub_seminars' as a WsubSeminar.
//
// Generated from index 'id'.
func WsubSeminarByID(db XODB, id int64) (*WsubSeminar, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, author, author_url, date, location, alias, summary, checked_out, checked_out_time, title, author_filiation, author_filiation_url, type, comment, state, created, created_by, modified, modified_by, publish_up, publish_down, attribs ` +
		`FROM jlabo.wsub_seminars ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ws := WsubSeminar{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ws.ID, &ws.Author, &ws.AuthorURL, &ws.Date, &ws.Location, &ws.Alias, &ws.Summary, &ws.CheckedOut, &ws.CheckedOutTime, &ws.Title, &ws.AuthorFiliation, &ws.AuthorFiliationURL, &ws.Type, &ws.Comment, &ws.State, &ws.Created, &ws.CreatedBy, &ws.Modified, &ws.ModifiedBy, &ws.PublishUp, &ws.PublishDown, &ws.Attribs)
	if err != nil {
		return nil, err
	}

	return &ws, nil
}

// WsubSeminarByID retrieves a row from 'jlabo.wsub_seminars' as a WsubSeminar.
//
// Generated from index 'wsub_seminars_id_pkey'.
func WsubSeminarByID(db XODB, id int64) (*WsubSeminar, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, author, author_url, date, location, alias, summary, checked_out, checked_out_time, title, author_filiation, author_filiation_url, type, comment, state, created, created_by, modified, modified_by, publish_up, publish_down, attribs ` +
		`FROM jlabo.wsub_seminars ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ws := WsubSeminar{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ws.ID, &ws.Author, &ws.AuthorURL, &ws.Date, &ws.Location, &ws.Alias, &ws.Summary, &ws.CheckedOut, &ws.CheckedOutTime, &ws.Title, &ws.AuthorFiliation, &ws.AuthorFiliationURL, &ws.Type, &ws.Comment, &ws.State, &ws.Created, &ws.CreatedBy, &ws.Modified, &ws.ModifiedBy, &ws.PublishUp, &ws.PublishDown, &ws.Attribs)
	if err != nil {
		return nil, err
	}

	return &ws, nil
}
