// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// WsubBanner represents a row from 'jlabo.wsub_banners'.
type WsubBanner struct {
	ID               int       `json:"id"`                // id
	Cid              int       `json:"cid"`               // cid
	Type             int       `json:"type"`              // type
	Name             string    `json:"name"`              // name
	Alias            string    `json:"alias"`             // alias
	Imptotal         int       `json:"imptotal"`          // imptotal
	Impmade          int       `json:"impmade"`           // impmade
	Clicks           int       `json:"clicks"`            // clicks
	Clickurl         string    `json:"clickurl"`          // clickurl
	State            int8      `json:"state"`             // state
	Catid            uint      `json:"catid"`             // catid
	Description      string    `json:"description"`       // description
	Custombannercode string    `json:"custombannercode"`  // custombannercode
	Sticky           bool      `json:"sticky"`            // sticky
	Ordering         int       `json:"ordering"`          // ordering
	Metakey          string    `json:"metakey"`           // metakey
	Params           string    `json:"params"`            // params
	OwnPrefix        bool      `json:"own_prefix"`        // own_prefix
	MetakeyPrefix    string    `json:"metakey_prefix"`    // metakey_prefix
	PurchaseType     int8      `json:"purchase_type"`     // purchase_type
	TrackClicks      int8      `json:"track_clicks"`      // track_clicks
	TrackImpressions int8      `json:"track_impressions"` // track_impressions
	CheckedOut       uint      `json:"checked_out"`       // checked_out
	CheckedOutTime   time.Time `json:"checked_out_time"`  // checked_out_time
	PublishUp        time.Time `json:"publish_up"`        // publish_up
	PublishDown      time.Time `json:"publish_down"`      // publish_down
	Reset            time.Time `json:"reset"`             // reset
	Created          time.Time `json:"created"`           // created
	Language         string    `json:"language"`          // language
	CreatedBy        uint      `json:"created_by"`        // created_by
	CreatedByAlias   string    `json:"created_by_alias"`  // created_by_alias
	Modified         time.Time `json:"modified"`          // modified
	ModifiedBy       uint      `json:"modified_by"`       // modified_by
	Version          uint      `json:"version"`           // version

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubBanner exists in the database.
func (wb *WsubBanner) Exists() bool {
	return wb._exists
}

// Deleted provides information if the WsubBanner has been deleted from the database.
func (wb *WsubBanner) Deleted() bool {
	return wb._deleted
}

// Insert inserts the WsubBanner to the database.
func (wb *WsubBanner) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wb._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO jlabo.wsub_banners (` +
		`cid, type, name, alias, imptotal, impmade, clicks, clickurl, state, catid, description, custombannercode, sticky, ordering, metakey, params, own_prefix, metakey_prefix, purchase_type, track_clicks, track_impressions, checked_out, checked_out_time, publish_up, publish_down, reset, created, language, created_by, created_by_alias, modified, modified_by, version` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wb.Cid, wb.Type, wb.Name, wb.Alias, wb.Imptotal, wb.Impmade, wb.Clicks, wb.Clickurl, wb.State, wb.Catid, wb.Description, wb.Custombannercode, wb.Sticky, wb.Ordering, wb.Metakey, wb.Params, wb.OwnPrefix, wb.MetakeyPrefix, wb.PurchaseType, wb.TrackClicks, wb.TrackImpressions, wb.CheckedOut, wb.CheckedOutTime, wb.PublishUp, wb.PublishDown, wb.Reset, wb.Created, wb.Language, wb.CreatedBy, wb.CreatedByAlias, wb.Modified, wb.ModifiedBy, wb.Version)
	res, err := db.Exec(sqlstr, wb.Cid, wb.Type, wb.Name, wb.Alias, wb.Imptotal, wb.Impmade, wb.Clicks, wb.Clickurl, wb.State, wb.Catid, wb.Description, wb.Custombannercode, wb.Sticky, wb.Ordering, wb.Metakey, wb.Params, wb.OwnPrefix, wb.MetakeyPrefix, wb.PurchaseType, wb.TrackClicks, wb.TrackImpressions, wb.CheckedOut, wb.CheckedOutTime, wb.PublishUp, wb.PublishDown, wb.Reset, wb.Created, wb.Language, wb.CreatedBy, wb.CreatedByAlias, wb.Modified, wb.ModifiedBy, wb.Version)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	wb.ID = int(id)
	wb._exists = true

	return nil
}

// Update updates the WsubBanner in the database.
func (wb *WsubBanner) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wb._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wb._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE jlabo.wsub_banners SET ` +
		`cid = ?, type = ?, name = ?, alias = ?, imptotal = ?, impmade = ?, clicks = ?, clickurl = ?, state = ?, catid = ?, description = ?, custombannercode = ?, sticky = ?, ordering = ?, metakey = ?, params = ?, own_prefix = ?, metakey_prefix = ?, purchase_type = ?, track_clicks = ?, track_impressions = ?, checked_out = ?, checked_out_time = ?, publish_up = ?, publish_down = ?, reset = ?, created = ?, language = ?, created_by = ?, created_by_alias = ?, modified = ?, modified_by = ?, version = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, wb.Cid, wb.Type, wb.Name, wb.Alias, wb.Imptotal, wb.Impmade, wb.Clicks, wb.Clickurl, wb.State, wb.Catid, wb.Description, wb.Custombannercode, wb.Sticky, wb.Ordering, wb.Metakey, wb.Params, wb.OwnPrefix, wb.MetakeyPrefix, wb.PurchaseType, wb.TrackClicks, wb.TrackImpressions, wb.CheckedOut, wb.CheckedOutTime, wb.PublishUp, wb.PublishDown, wb.Reset, wb.Created, wb.Language, wb.CreatedBy, wb.CreatedByAlias, wb.Modified, wb.ModifiedBy, wb.Version, wb.ID)
	_, err = db.Exec(sqlstr, wb.Cid, wb.Type, wb.Name, wb.Alias, wb.Imptotal, wb.Impmade, wb.Clicks, wb.Clickurl, wb.State, wb.Catid, wb.Description, wb.Custombannercode, wb.Sticky, wb.Ordering, wb.Metakey, wb.Params, wb.OwnPrefix, wb.MetakeyPrefix, wb.PurchaseType, wb.TrackClicks, wb.TrackImpressions, wb.CheckedOut, wb.CheckedOutTime, wb.PublishUp, wb.PublishDown, wb.Reset, wb.Created, wb.Language, wb.CreatedBy, wb.CreatedByAlias, wb.Modified, wb.ModifiedBy, wb.Version, wb.ID)
	return err
}

// Save saves the WsubBanner to the database.
func (wb *WsubBanner) Save(db XODB) error {
	if wb.Exists() {
		return wb.Update(db)
	}

	return wb.Insert(db)
}

// Delete deletes the WsubBanner from the database.
func (wb *WsubBanner) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wb._exists {
		return nil
	}

	// if deleted, bail
	if wb._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM jlabo.wsub_banners WHERE id = ?`

	// run query
	XOLog(sqlstr, wb.ID)
	_, err = db.Exec(sqlstr, wb.ID)
	if err != nil {
		return err
	}

	// set deleted
	wb._deleted = true

	return nil
}

// WsubBannersByCatid retrieves a row from 'jlabo.wsub_banners' as a WsubBanner.
//
// Generated from index 'idx_banner_catid'.
func WsubBannersByCatid(db XODB, catid uint) ([]*WsubBanner, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, cid, type, name, alias, imptotal, impmade, clicks, clickurl, state, catid, description, custombannercode, sticky, ordering, metakey, params, own_prefix, metakey_prefix, purchase_type, track_clicks, track_impressions, checked_out, checked_out_time, publish_up, publish_down, reset, created, language, created_by, created_by_alias, modified, modified_by, version ` +
		`FROM jlabo.wsub_banners ` +
		`WHERE catid = ?`

	// run query
	XOLog(sqlstr, catid)
	q, err := db.Query(sqlstr, catid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubBanner{}
	for q.Next() {
		wb := WsubBanner{
			_exists: true,
		}

		// scan
		err = q.Scan(&wb.ID, &wb.Cid, &wb.Type, &wb.Name, &wb.Alias, &wb.Imptotal, &wb.Impmade, &wb.Clicks, &wb.Clickurl, &wb.State, &wb.Catid, &wb.Description, &wb.Custombannercode, &wb.Sticky, &wb.Ordering, &wb.Metakey, &wb.Params, &wb.OwnPrefix, &wb.MetakeyPrefix, &wb.PurchaseType, &wb.TrackClicks, &wb.TrackImpressions, &wb.CheckedOut, &wb.CheckedOutTime, &wb.PublishUp, &wb.PublishDown, &wb.Reset, &wb.Created, &wb.Language, &wb.CreatedBy, &wb.CreatedByAlias, &wb.Modified, &wb.ModifiedBy, &wb.Version)
		if err != nil {
			return nil, err
		}

		res = append(res, &wb)
	}

	return res, nil
}

// WsubBannersByLanguage retrieves a row from 'jlabo.wsub_banners' as a WsubBanner.
//
// Generated from index 'idx_language'.
func WsubBannersByLanguage(db XODB, language string) ([]*WsubBanner, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, cid, type, name, alias, imptotal, impmade, clicks, clickurl, state, catid, description, custombannercode, sticky, ordering, metakey, params, own_prefix, metakey_prefix, purchase_type, track_clicks, track_impressions, checked_out, checked_out_time, publish_up, publish_down, reset, created, language, created_by, created_by_alias, modified, modified_by, version ` +
		`FROM jlabo.wsub_banners ` +
		`WHERE language = ?`

	// run query
	XOLog(sqlstr, language)
	q, err := db.Query(sqlstr, language)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubBanner{}
	for q.Next() {
		wb := WsubBanner{
			_exists: true,
		}

		// scan
		err = q.Scan(&wb.ID, &wb.Cid, &wb.Type, &wb.Name, &wb.Alias, &wb.Imptotal, &wb.Impmade, &wb.Clicks, &wb.Clickurl, &wb.State, &wb.Catid, &wb.Description, &wb.Custombannercode, &wb.Sticky, &wb.Ordering, &wb.Metakey, &wb.Params, &wb.OwnPrefix, &wb.MetakeyPrefix, &wb.PurchaseType, &wb.TrackClicks, &wb.TrackImpressions, &wb.CheckedOut, &wb.CheckedOutTime, &wb.PublishUp, &wb.PublishDown, &wb.Reset, &wb.Created, &wb.Language, &wb.CreatedBy, &wb.CreatedByAlias, &wb.Modified, &wb.ModifiedBy, &wb.Version)
		if err != nil {
			return nil, err
		}

		res = append(res, &wb)
	}

	return res, nil
}

// WsubBannersByMetakeyPrefix retrieves a row from 'jlabo.wsub_banners' as a WsubBanner.
//
// Generated from index 'idx_metakey_prefix'.
func WsubBannersByMetakeyPrefix(db XODB, metakeyPrefix string) ([]*WsubBanner, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, cid, type, name, alias, imptotal, impmade, clicks, clickurl, state, catid, description, custombannercode, sticky, ordering, metakey, params, own_prefix, metakey_prefix, purchase_type, track_clicks, track_impressions, checked_out, checked_out_time, publish_up, publish_down, reset, created, language, created_by, created_by_alias, modified, modified_by, version ` +
		`FROM jlabo.wsub_banners ` +
		`WHERE metakey_prefix = ?`

	// run query
	XOLog(sqlstr, metakeyPrefix)
	q, err := db.Query(sqlstr, metakeyPrefix)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubBanner{}
	for q.Next() {
		wb := WsubBanner{
			_exists: true,
		}

		// scan
		err = q.Scan(&wb.ID, &wb.Cid, &wb.Type, &wb.Name, &wb.Alias, &wb.Imptotal, &wb.Impmade, &wb.Clicks, &wb.Clickurl, &wb.State, &wb.Catid, &wb.Description, &wb.Custombannercode, &wb.Sticky, &wb.Ordering, &wb.Metakey, &wb.Params, &wb.OwnPrefix, &wb.MetakeyPrefix, &wb.PurchaseType, &wb.TrackClicks, &wb.TrackImpressions, &wb.CheckedOut, &wb.CheckedOutTime, &wb.PublishUp, &wb.PublishDown, &wb.Reset, &wb.Created, &wb.Language, &wb.CreatedBy, &wb.CreatedByAlias, &wb.Modified, &wb.ModifiedBy, &wb.Version)
		if err != nil {
			return nil, err
		}

		res = append(res, &wb)
	}

	return res, nil
}

// WsubBannersByOwnPrefix retrieves a row from 'jlabo.wsub_banners' as a WsubBanner.
//
// Generated from index 'idx_own_prefix'.
func WsubBannersByOwnPrefix(db XODB, ownPrefix bool) ([]*WsubBanner, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, cid, type, name, alias, imptotal, impmade, clicks, clickurl, state, catid, description, custombannercode, sticky, ordering, metakey, params, own_prefix, metakey_prefix, purchase_type, track_clicks, track_impressions, checked_out, checked_out_time, publish_up, publish_down, reset, created, language, created_by, created_by_alias, modified, modified_by, version ` +
		`FROM jlabo.wsub_banners ` +
		`WHERE own_prefix = ?`

	// run query
	XOLog(sqlstr, ownPrefix)
	q, err := db.Query(sqlstr, ownPrefix)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubBanner{}
	for q.Next() {
		wb := WsubBanner{
			_exists: true,
		}

		// scan
		err = q.Scan(&wb.ID, &wb.Cid, &wb.Type, &wb.Name, &wb.Alias, &wb.Imptotal, &wb.Impmade, &wb.Clicks, &wb.Clickurl, &wb.State, &wb.Catid, &wb.Description, &wb.Custombannercode, &wb.Sticky, &wb.Ordering, &wb.Metakey, &wb.Params, &wb.OwnPrefix, &wb.MetakeyPrefix, &wb.PurchaseType, &wb.TrackClicks, &wb.TrackImpressions, &wb.CheckedOut, &wb.CheckedOutTime, &wb.PublishUp, &wb.PublishDown, &wb.Reset, &wb.Created, &wb.Language, &wb.CreatedBy, &wb.CreatedByAlias, &wb.Modified, &wb.ModifiedBy, &wb.Version)
		if err != nil {
			return nil, err
		}

		res = append(res, &wb)
	}

	return res, nil
}

// WsubBannersByState retrieves a row from 'jlabo.wsub_banners' as a WsubBanner.
//
// Generated from index 'idx_state'.
func WsubBannersByState(db XODB, state int8) ([]*WsubBanner, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, cid, type, name, alias, imptotal, impmade, clicks, clickurl, state, catid, description, custombannercode, sticky, ordering, metakey, params, own_prefix, metakey_prefix, purchase_type, track_clicks, track_impressions, checked_out, checked_out_time, publish_up, publish_down, reset, created, language, created_by, created_by_alias, modified, modified_by, version ` +
		`FROM jlabo.wsub_banners ` +
		`WHERE state = ?`

	// run query
	XOLog(sqlstr, state)
	q, err := db.Query(sqlstr, state)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubBanner{}
	for q.Next() {
		wb := WsubBanner{
			_exists: true,
		}

		// scan
		err = q.Scan(&wb.ID, &wb.Cid, &wb.Type, &wb.Name, &wb.Alias, &wb.Imptotal, &wb.Impmade, &wb.Clicks, &wb.Clickurl, &wb.State, &wb.Catid, &wb.Description, &wb.Custombannercode, &wb.Sticky, &wb.Ordering, &wb.Metakey, &wb.Params, &wb.OwnPrefix, &wb.MetakeyPrefix, &wb.PurchaseType, &wb.TrackClicks, &wb.TrackImpressions, &wb.CheckedOut, &wb.CheckedOutTime, &wb.PublishUp, &wb.PublishDown, &wb.Reset, &wb.Created, &wb.Language, &wb.CreatedBy, &wb.CreatedByAlias, &wb.Modified, &wb.ModifiedBy, &wb.Version)
		if err != nil {
			return nil, err
		}

		res = append(res, &wb)
	}

	return res, nil
}

// WsubBannerByID retrieves a row from 'jlabo.wsub_banners' as a WsubBanner.
//
// Generated from index 'wsub_banners_id_pkey'.
func WsubBannerByID(db XODB, id int) (*WsubBanner, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, cid, type, name, alias, imptotal, impmade, clicks, clickurl, state, catid, description, custombannercode, sticky, ordering, metakey, params, own_prefix, metakey_prefix, purchase_type, track_clicks, track_impressions, checked_out, checked_out_time, publish_up, publish_down, reset, created, language, created_by, created_by_alias, modified, modified_by, version ` +
		`FROM jlabo.wsub_banners ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	wb := WsubBanner{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&wb.ID, &wb.Cid, &wb.Type, &wb.Name, &wb.Alias, &wb.Imptotal, &wb.Impmade, &wb.Clicks, &wb.Clickurl, &wb.State, &wb.Catid, &wb.Description, &wb.Custombannercode, &wb.Sticky, &wb.Ordering, &wb.Metakey, &wb.Params, &wb.OwnPrefix, &wb.MetakeyPrefix, &wb.PurchaseType, &wb.TrackClicks, &wb.TrackImpressions, &wb.CheckedOut, &wb.CheckedOutTime, &wb.PublishUp, &wb.PublishDown, &wb.Reset, &wb.Created, &wb.Language, &wb.CreatedBy, &wb.CreatedByAlias, &wb.Modified, &wb.ModifiedBy, &wb.Version)
	if err != nil {
		return nil, err
	}

	return &wb, nil
}
