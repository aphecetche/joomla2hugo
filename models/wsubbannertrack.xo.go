// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// WsubBannerTrack represents a row from 'jlabo.wsub_banner_tracks'.
type WsubBannerTrack struct {
	TrackDate time.Time `json:"track_date"` // track_date
	TrackType uint      `json:"track_type"` // track_type
	BannerID  uint      `json:"banner_id"`  // banner_id
	Count     uint      `json:"count"`      // count

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubBannerTrack exists in the database.
func (wbt *WsubBannerTrack) Exists() bool {
	return wbt._exists
}

// Deleted provides information if the WsubBannerTrack has been deleted from the database.
func (wbt *WsubBannerTrack) Deleted() bool {
	return wbt._deleted
}

// Insert inserts the WsubBannerTrack to the database.
func (wbt *WsubBannerTrack) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wbt._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO jlabo.wsub_banner_tracks (` +
		`track_date, track_type, banner_id, count` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wbt.TrackDate, wbt.TrackType, wbt.BannerID, wbt.Count)
	_, err = db.Exec(sqlstr, wbt.TrackDate, wbt.TrackType, wbt.BannerID, wbt.Count)
	if err != nil {
		return err
	}

	// set existence
	wbt._exists = true

	return nil
}

// Update updates the WsubBannerTrack in the database.
func (wbt *WsubBannerTrack) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wbt._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wbt._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE jlabo.wsub_banner_tracks SET ` +
		`count = ?` +
		` WHERE track_date = ? AND track_type = ? AND banner_id = ?`

	// run query
	XOLog(sqlstr, wbt.Count, wbt.TrackDate, wbt.TrackType, wbt.BannerID)
	_, err = db.Exec(sqlstr, wbt.Count, wbt.TrackDate, wbt.TrackType, wbt.BannerID)
	return err
}

// Save saves the WsubBannerTrack to the database.
func (wbt *WsubBannerTrack) Save(db XODB) error {
	if wbt.Exists() {
		return wbt.Update(db)
	}

	return wbt.Insert(db)
}

// Delete deletes the WsubBannerTrack from the database.
func (wbt *WsubBannerTrack) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wbt._exists {
		return nil
	}

	// if deleted, bail
	if wbt._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM jlabo.wsub_banner_tracks WHERE track_date = ? AND track_type = ? AND banner_id = ?`

	// run query
	XOLog(sqlstr, wbt.TrackDate, wbt.TrackType, wbt.BannerID)
	_, err = db.Exec(sqlstr, wbt.TrackDate, wbt.TrackType, wbt.BannerID)
	if err != nil {
		return err
	}

	// set deleted
	wbt._deleted = true

	return nil
}

// WsubBannerTracksByBannerID retrieves a row from 'jlabo.wsub_banner_tracks' as a WsubBannerTrack.
//
// Generated from index 'idx_banner_id'.
func WsubBannerTracksByBannerID(db XODB, bannerID uint) ([]*WsubBannerTrack, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`track_date, track_type, banner_id, count ` +
		`FROM jlabo.wsub_banner_tracks ` +
		`WHERE banner_id = ?`

	// run query
	XOLog(sqlstr, bannerID)
	q, err := db.Query(sqlstr, bannerID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubBannerTrack{}
	for q.Next() {
		wbt := WsubBannerTrack{
			_exists: true,
		}

		// scan
		err = q.Scan(&wbt.TrackDate, &wbt.TrackType, &wbt.BannerID, &wbt.Count)
		if err != nil {
			return nil, err
		}

		res = append(res, &wbt)
	}

	return res, nil
}

// WsubBannerTracksByTrackDate retrieves a row from 'jlabo.wsub_banner_tracks' as a WsubBannerTrack.
//
// Generated from index 'idx_track_date'.
func WsubBannerTracksByTrackDate(db XODB, trackDate time.Time) ([]*WsubBannerTrack, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`track_date, track_type, banner_id, count ` +
		`FROM jlabo.wsub_banner_tracks ` +
		`WHERE track_date = ?`

	// run query
	XOLog(sqlstr, trackDate)
	q, err := db.Query(sqlstr, trackDate)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubBannerTrack{}
	for q.Next() {
		wbt := WsubBannerTrack{
			_exists: true,
		}

		// scan
		err = q.Scan(&wbt.TrackDate, &wbt.TrackType, &wbt.BannerID, &wbt.Count)
		if err != nil {
			return nil, err
		}

		res = append(res, &wbt)
	}

	return res, nil
}

// WsubBannerTracksByTrackType retrieves a row from 'jlabo.wsub_banner_tracks' as a WsubBannerTrack.
//
// Generated from index 'idx_track_type'.
func WsubBannerTracksByTrackType(db XODB, trackType uint) ([]*WsubBannerTrack, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`track_date, track_type, banner_id, count ` +
		`FROM jlabo.wsub_banner_tracks ` +
		`WHERE track_type = ?`

	// run query
	XOLog(sqlstr, trackType)
	q, err := db.Query(sqlstr, trackType)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubBannerTrack{}
	for q.Next() {
		wbt := WsubBannerTrack{
			_exists: true,
		}

		// scan
		err = q.Scan(&wbt.TrackDate, &wbt.TrackType, &wbt.BannerID, &wbt.Count)
		if err != nil {
			return nil, err
		}

		res = append(res, &wbt)
	}

	return res, nil
}

// WsubBannerTrackByBannerID retrieves a row from 'jlabo.wsub_banner_tracks' as a WsubBannerTrack.
//
// Generated from index 'wsub_banner_tracks_banner_id_pkey'.
func WsubBannerTrackByBannerID(db XODB, bannerID uint) (*WsubBannerTrack, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`track_date, track_type, banner_id, count ` +
		`FROM jlabo.wsub_banner_tracks ` +
		`WHERE banner_id = ?`

	// run query
	XOLog(sqlstr, bannerID)
	wbt := WsubBannerTrack{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, bannerID).Scan(&wbt.TrackDate, &wbt.TrackType, &wbt.BannerID, &wbt.Count)
	if err != nil {
		return nil, err
	}

	return &wbt, nil
}
