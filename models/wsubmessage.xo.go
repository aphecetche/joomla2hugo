// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// WsubMessage represents a row from 'jlabo.wsub_messages'.
type WsubMessage struct {
	MessageID  uint      `json:"message_id"`   // message_id
	UserIDFrom uint      `json:"user_id_from"` // user_id_from
	UserIDTo   uint      `json:"user_id_to"`   // user_id_to
	FolderID   int8      `json:"folder_id"`    // folder_id
	DateTime   time.Time `json:"date_time"`    // date_time
	State      bool      `json:"state"`        // state
	Priority   bool      `json:"priority"`     // priority
	Subject    string    `json:"subject"`      // subject
	Message    string    `json:"message"`      // message

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubMessage exists in the database.
func (wm *WsubMessage) Exists() bool {
	return wm._exists
}

// Deleted provides information if the WsubMessage has been deleted from the database.
func (wm *WsubMessage) Deleted() bool {
	return wm._deleted
}

// Insert inserts the WsubMessage to the database.
func (wm *WsubMessage) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO jlabo.wsub_messages (` +
		`user_id_from, user_id_to, folder_id, date_time, state, priority, subject, message` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wm.UserIDFrom, wm.UserIDTo, wm.FolderID, wm.DateTime, wm.State, wm.Priority, wm.Subject, wm.Message)
	res, err := db.Exec(sqlstr, wm.UserIDFrom, wm.UserIDTo, wm.FolderID, wm.DateTime, wm.State, wm.Priority, wm.Subject, wm.Message)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	wm.MessageID = uint(id)
	wm._exists = true

	return nil
}

// Update updates the WsubMessage in the database.
func (wm *WsubMessage) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE jlabo.wsub_messages SET ` +
		`user_id_from = ?, user_id_to = ?, folder_id = ?, date_time = ?, state = ?, priority = ?, subject = ?, message = ?` +
		` WHERE message_id = ?`

	// run query
	XOLog(sqlstr, wm.UserIDFrom, wm.UserIDTo, wm.FolderID, wm.DateTime, wm.State, wm.Priority, wm.Subject, wm.Message, wm.MessageID)
	_, err = db.Exec(sqlstr, wm.UserIDFrom, wm.UserIDTo, wm.FolderID, wm.DateTime, wm.State, wm.Priority, wm.Subject, wm.Message, wm.MessageID)
	return err
}

// Save saves the WsubMessage to the database.
func (wm *WsubMessage) Save(db XODB) error {
	if wm.Exists() {
		return wm.Update(db)
	}

	return wm.Insert(db)
}

// Delete deletes the WsubMessage from the database.
func (wm *WsubMessage) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wm._exists {
		return nil
	}

	// if deleted, bail
	if wm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM jlabo.wsub_messages WHERE message_id = ?`

	// run query
	XOLog(sqlstr, wm.MessageID)
	_, err = db.Exec(sqlstr, wm.MessageID)
	if err != nil {
		return err
	}

	// set deleted
	wm._deleted = true

	return nil
}

// WsubMessagesByUserIDToState retrieves a row from 'jlabo.wsub_messages' as a WsubMessage.
//
// Generated from index 'useridto_state'.
func WsubMessagesByUserIDToState(db XODB, userIDTo uint, state bool) ([]*WsubMessage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`message_id, user_id_from, user_id_to, folder_id, date_time, state, priority, subject, message ` +
		`FROM jlabo.wsub_messages ` +
		`WHERE user_id_to = ? AND state = ?`

	// run query
	XOLog(sqlstr, userIDTo, state)
	q, err := db.Query(sqlstr, userIDTo, state)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubMessage{}
	for q.Next() {
		wm := WsubMessage{
			_exists: true,
		}

		// scan
		err = q.Scan(&wm.MessageID, &wm.UserIDFrom, &wm.UserIDTo, &wm.FolderID, &wm.DateTime, &wm.State, &wm.Priority, &wm.Subject, &wm.Message)
		if err != nil {
			return nil, err
		}

		res = append(res, &wm)
	}

	return res, nil
}

// WsubMessageByMessageID retrieves a row from 'jlabo.wsub_messages' as a WsubMessage.
//
// Generated from index 'wsub_messages_message_id_pkey'.
func WsubMessageByMessageID(db XODB, messageID uint) (*WsubMessage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`message_id, user_id_from, user_id_to, folder_id, date_time, state, priority, subject, message ` +
		`FROM jlabo.wsub_messages ` +
		`WHERE message_id = ?`

	// run query
	XOLog(sqlstr, messageID)
	wm := WsubMessage{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, messageID).Scan(&wm.MessageID, &wm.UserIDFrom, &wm.UserIDTo, &wm.FolderID, &wm.DateTime, &wm.State, &wm.Priority, &wm.Subject, &wm.Message)
	if err != nil {
		return nil, err
	}

	return &wm, nil
}
