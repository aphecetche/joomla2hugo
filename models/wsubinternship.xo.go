// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// WsubInternship represents a row from 'jlabo.wsub_internships'.
type WsubInternship struct {
	ID                    int64     `json:"id"`                      // id
	SchoolYear            string    `json:"school_year"`             // school_year
	Grade                 string    `json:"grade"`                   // grade
	Alias                 string    `json:"alias"`                   // alias
	Description           string    `json:"description"`             // description
	ContactName           string    `json:"contact_name"`            // contact_name
	CheckedOut            int       `json:"checked_out"`             // checked_out
	CheckedOutTime        time.Time `json:"checked_out_time"`        // checked_out_time
	Title                 string    `json:"title"`                   // title
	State                 int8      `json:"state"`                   // state
	Created               time.Time `json:"created"`                 // created
	CreatedBy             int       `json:"created_by"`              // created_by
	Modified              time.Time `json:"modified"`                // modified
	ModifiedBy            int       `json:"modified_by"`             // modified_by
	PublishUp             time.Time `json:"publish_up"`              // publish_up
	PublishDown           time.Time `json:"publish_down"`            // publish_down
	Attribs               string    `json:"attribs"`                 // attribs
	Keywords              string    `json:"keywords"`                // keywords
	NeededSkills          string    `json:"needed_skills"`           // needed_skills
	InternalOffer         bool      `json:"internal_offer"`          // internal_offer
	EnterpriseOffer       bool      `json:"enterprise_offer"`        // enterprise_offer
	ContactPhone          string    `json:"contact_phone"`           // contact_phone
	ContactEmail          string    `json:"contact_email"`           // contact_email
	HostLaboratoryName    string    `json:"host_laboratory_name"`    // host_laboratory_name
	HostLaboratoryAddress string    `json:"host_laboratory_address"` // host_laboratory_address
	Logo1                 string    `json:"logo1"`                   // logo1
	Logo2                 string    `json:"logo2"`                   // logo2
	Logo3                 string    `json:"logo3"`                   // logo3
	Misc                  string    `json:"misc"`                    // misc

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubInternship exists in the database.
func (wi *WsubInternship) Exists() bool {
	return wi._exists
}

// Deleted provides information if the WsubInternship has been deleted from the database.
func (wi *WsubInternship) Deleted() bool {
	return wi._deleted
}

// Insert inserts the WsubInternship to the database.
func (wi *WsubInternship) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wi._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO jlabo.wsub_internships (` +
		`school_year, grade, alias, description, contact_name, checked_out, checked_out_time, title, state, created, created_by, modified, modified_by, publish_up, publish_down, attribs, keywords, needed_skills, internal_offer, enterprise_offer, contact_phone, contact_email, host_laboratory_name, host_laboratory_address, logo1, logo2, logo3, misc` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wi.SchoolYear, wi.Grade, wi.Alias, wi.Description, wi.ContactName, wi.CheckedOut, wi.CheckedOutTime, wi.Title, wi.State, wi.Created, wi.CreatedBy, wi.Modified, wi.ModifiedBy, wi.PublishUp, wi.PublishDown, wi.Attribs, wi.Keywords, wi.NeededSkills, wi.InternalOffer, wi.EnterpriseOffer, wi.ContactPhone, wi.ContactEmail, wi.HostLaboratoryName, wi.HostLaboratoryAddress, wi.Logo1, wi.Logo2, wi.Logo3, wi.Misc)
	res, err := db.Exec(sqlstr, wi.SchoolYear, wi.Grade, wi.Alias, wi.Description, wi.ContactName, wi.CheckedOut, wi.CheckedOutTime, wi.Title, wi.State, wi.Created, wi.CreatedBy, wi.Modified, wi.ModifiedBy, wi.PublishUp, wi.PublishDown, wi.Attribs, wi.Keywords, wi.NeededSkills, wi.InternalOffer, wi.EnterpriseOffer, wi.ContactPhone, wi.ContactEmail, wi.HostLaboratoryName, wi.HostLaboratoryAddress, wi.Logo1, wi.Logo2, wi.Logo3, wi.Misc)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	wi.ID = int64(id)
	wi._exists = true

	return nil
}

// Update updates the WsubInternship in the database.
func (wi *WsubInternship) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wi._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wi._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE jlabo.wsub_internships SET ` +
		`school_year = ?, grade = ?, alias = ?, description = ?, contact_name = ?, checked_out = ?, checked_out_time = ?, title = ?, state = ?, created = ?, created_by = ?, modified = ?, modified_by = ?, publish_up = ?, publish_down = ?, attribs = ?, keywords = ?, needed_skills = ?, internal_offer = ?, enterprise_offer = ?, contact_phone = ?, contact_email = ?, host_laboratory_name = ?, host_laboratory_address = ?, logo1 = ?, logo2 = ?, logo3 = ?, misc = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, wi.SchoolYear, wi.Grade, wi.Alias, wi.Description, wi.ContactName, wi.CheckedOut, wi.CheckedOutTime, wi.Title, wi.State, wi.Created, wi.CreatedBy, wi.Modified, wi.ModifiedBy, wi.PublishUp, wi.PublishDown, wi.Attribs, wi.Keywords, wi.NeededSkills, wi.InternalOffer, wi.EnterpriseOffer, wi.ContactPhone, wi.ContactEmail, wi.HostLaboratoryName, wi.HostLaboratoryAddress, wi.Logo1, wi.Logo2, wi.Logo3, wi.Misc, wi.ID)
	_, err = db.Exec(sqlstr, wi.SchoolYear, wi.Grade, wi.Alias, wi.Description, wi.ContactName, wi.CheckedOut, wi.CheckedOutTime, wi.Title, wi.State, wi.Created, wi.CreatedBy, wi.Modified, wi.ModifiedBy, wi.PublishUp, wi.PublishDown, wi.Attribs, wi.Keywords, wi.NeededSkills, wi.InternalOffer, wi.EnterpriseOffer, wi.ContactPhone, wi.ContactEmail, wi.HostLaboratoryName, wi.HostLaboratoryAddress, wi.Logo1, wi.Logo2, wi.Logo3, wi.Misc, wi.ID)
	return err
}

// Save saves the WsubInternship to the database.
func (wi *WsubInternship) Save(db XODB) error {
	if wi.Exists() {
		return wi.Update(db)
	}

	return wi.Insert(db)
}

// Delete deletes the WsubInternship from the database.
func (wi *WsubInternship) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wi._exists {
		return nil
	}

	// if deleted, bail
	if wi._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM jlabo.wsub_internships WHERE id = ?`

	// run query
	XOLog(sqlstr, wi.ID)
	_, err = db.Exec(sqlstr, wi.ID)
	if err != nil {
		return err
	}

	// set deleted
	wi._deleted = true

	return nil
}

// WsubInternshipsByAlias retrieves a row from 'jlabo.wsub_internships' as a WsubInternship.
//
// Generated from index 'alias'.
func WsubInternshipsByAlias(db XODB, alias string) ([]*WsubInternship, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, school_year, grade, alias, description, contact_name, checked_out, checked_out_time, title, state, created, created_by, modified, modified_by, publish_up, publish_down, attribs, keywords, needed_skills, internal_offer, enterprise_offer, contact_phone, contact_email, host_laboratory_name, host_laboratory_address, logo1, logo2, logo3, misc ` +
		`FROM jlabo.wsub_internships ` +
		`WHERE alias = ?`

	// run query
	XOLog(sqlstr, alias)
	q, err := db.Query(sqlstr, alias)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubInternship{}
	for q.Next() {
		wi := WsubInternship{
			_exists: true,
		}

		// scan
		err = q.Scan(&wi.ID, &wi.SchoolYear, &wi.Grade, &wi.Alias, &wi.Description, &wi.ContactName, &wi.CheckedOut, &wi.CheckedOutTime, &wi.Title, &wi.State, &wi.Created, &wi.CreatedBy, &wi.Modified, &wi.ModifiedBy, &wi.PublishUp, &wi.PublishDown, &wi.Attribs, &wi.Keywords, &wi.NeededSkills, &wi.InternalOffer, &wi.EnterpriseOffer, &wi.ContactPhone, &wi.ContactEmail, &wi.HostLaboratoryName, &wi.HostLaboratoryAddress, &wi.Logo1, &wi.Logo2, &wi.Logo3, &wi.Misc)
		if err != nil {
			return nil, err
		}

		res = append(res, &wi)
	}

	return res, nil
}

// WsubInternshipByID retrieves a row from 'jlabo.wsub_internships' as a WsubInternship.
//
// Generated from index 'id'.
func WsubInternshipByID(db XODB, id int64) (*WsubInternship, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, school_year, grade, alias, description, contact_name, checked_out, checked_out_time, title, state, created, created_by, modified, modified_by, publish_up, publish_down, attribs, keywords, needed_skills, internal_offer, enterprise_offer, contact_phone, contact_email, host_laboratory_name, host_laboratory_address, logo1, logo2, logo3, misc ` +
		`FROM jlabo.wsub_internships ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	wi := WsubInternship{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&wi.ID, &wi.SchoolYear, &wi.Grade, &wi.Alias, &wi.Description, &wi.ContactName, &wi.CheckedOut, &wi.CheckedOutTime, &wi.Title, &wi.State, &wi.Created, &wi.CreatedBy, &wi.Modified, &wi.ModifiedBy, &wi.PublishUp, &wi.PublishDown, &wi.Attribs, &wi.Keywords, &wi.NeededSkills, &wi.InternalOffer, &wi.EnterpriseOffer, &wi.ContactPhone, &wi.ContactEmail, &wi.HostLaboratoryName, &wi.HostLaboratoryAddress, &wi.Logo1, &wi.Logo2, &wi.Logo3, &wi.Misc)
	if err != nil {
		return nil, err
	}

	return &wi, nil
}

// WsubInternshipByID retrieves a row from 'jlabo.wsub_internships' as a WsubInternship.
//
// Generated from index 'wsub_internships_id_pkey'.
func WsubInternshipByID(db XODB, id int64) (*WsubInternship, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, school_year, grade, alias, description, contact_name, checked_out, checked_out_time, title, state, created, created_by, modified, modified_by, publish_up, publish_down, attribs, keywords, needed_skills, internal_offer, enterprise_offer, contact_phone, contact_email, host_laboratory_name, host_laboratory_address, logo1, logo2, logo3, misc ` +
		`FROM jlabo.wsub_internships ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	wi := WsubInternship{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&wi.ID, &wi.SchoolYear, &wi.Grade, &wi.Alias, &wi.Description, &wi.ContactName, &wi.CheckedOut, &wi.CheckedOutTime, &wi.Title, &wi.State, &wi.Created, &wi.CreatedBy, &wi.Modified, &wi.ModifiedBy, &wi.PublishUp, &wi.PublishDown, &wi.Attribs, &wi.Keywords, &wi.NeededSkills, &wi.InternalOffer, &wi.EnterpriseOffer, &wi.ContactPhone, &wi.ContactEmail, &wi.HostLaboratoryName, &wi.HostLaboratoryAddress, &wi.Logo1, &wi.Logo2, &wi.Logo3, &wi.Misc)
	if err != nil {
		return nil, err
	}

	return &wi, nil
}
