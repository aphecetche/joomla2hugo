// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// WsubUcmBase represents a row from 'jlabo.wsub_ucm_base'.
type WsubUcmBase struct {
	UcmID         uint `json:"ucm_id"`          // ucm_id
	UcmItemID     int  `json:"ucm_item_id"`     // ucm_item_id
	UcmTypeID     int  `json:"ucm_type_id"`     // ucm_type_id
	UcmLanguageID int  `json:"ucm_language_id"` // ucm_language_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubUcmBase exists in the database.
func (wub *WsubUcmBase) Exists() bool {
	return wub._exists
}

// Deleted provides information if the WsubUcmBase has been deleted from the database.
func (wub *WsubUcmBase) Deleted() bool {
	return wub._deleted
}

// Insert inserts the WsubUcmBase to the database.
func (wub *WsubUcmBase) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wub._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO jlabo.wsub_ucm_base (` +
		`ucm_id, ucm_item_id, ucm_type_id, ucm_language_id` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wub.UcmID, wub.UcmItemID, wub.UcmTypeID, wub.UcmLanguageID)
	_, err = db.Exec(sqlstr, wub.UcmID, wub.UcmItemID, wub.UcmTypeID, wub.UcmLanguageID)
	if err != nil {
		return err
	}

	// set existence
	wub._exists = true

	return nil
}

// Update updates the WsubUcmBase in the database.
func (wub *WsubUcmBase) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wub._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wub._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE jlabo.wsub_ucm_base SET ` +
		`ucm_item_id = ?, ucm_type_id = ?, ucm_language_id = ?` +
		` WHERE ucm_id = ?`

	// run query
	XOLog(sqlstr, wub.UcmItemID, wub.UcmTypeID, wub.UcmLanguageID, wub.UcmID)
	_, err = db.Exec(sqlstr, wub.UcmItemID, wub.UcmTypeID, wub.UcmLanguageID, wub.UcmID)
	return err
}

// Save saves the WsubUcmBase to the database.
func (wub *WsubUcmBase) Save(db XODB) error {
	if wub.Exists() {
		return wub.Update(db)
	}

	return wub.Insert(db)
}

// Delete deletes the WsubUcmBase from the database.
func (wub *WsubUcmBase) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wub._exists {
		return nil
	}

	// if deleted, bail
	if wub._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM jlabo.wsub_ucm_base WHERE ucm_id = ?`

	// run query
	XOLog(sqlstr, wub.UcmID)
	_, err = db.Exec(sqlstr, wub.UcmID)
	if err != nil {
		return err
	}

	// set deleted
	wub._deleted = true

	return nil
}

// WsubUcmBasesByUcmItemID retrieves a row from 'jlabo.wsub_ucm_base' as a WsubUcmBase.
//
// Generated from index 'idx_ucm_item_id'.
func WsubUcmBasesByUcmItemID(db XODB, ucmItemID int) ([]*WsubUcmBase, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ucm_id, ucm_item_id, ucm_type_id, ucm_language_id ` +
		`FROM jlabo.wsub_ucm_base ` +
		`WHERE ucm_item_id = ?`

	// run query
	XOLog(sqlstr, ucmItemID)
	q, err := db.Query(sqlstr, ucmItemID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubUcmBase{}
	for q.Next() {
		wub := WsubUcmBase{
			_exists: true,
		}

		// scan
		err = q.Scan(&wub.UcmID, &wub.UcmItemID, &wub.UcmTypeID, &wub.UcmLanguageID)
		if err != nil {
			return nil, err
		}

		res = append(res, &wub)
	}

	return res, nil
}

// WsubUcmBasesByUcmLanguageID retrieves a row from 'jlabo.wsub_ucm_base' as a WsubUcmBase.
//
// Generated from index 'idx_ucm_language_id'.
func WsubUcmBasesByUcmLanguageID(db XODB, ucmLanguageID int) ([]*WsubUcmBase, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ucm_id, ucm_item_id, ucm_type_id, ucm_language_id ` +
		`FROM jlabo.wsub_ucm_base ` +
		`WHERE ucm_language_id = ?`

	// run query
	XOLog(sqlstr, ucmLanguageID)
	q, err := db.Query(sqlstr, ucmLanguageID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubUcmBase{}
	for q.Next() {
		wub := WsubUcmBase{
			_exists: true,
		}

		// scan
		err = q.Scan(&wub.UcmID, &wub.UcmItemID, &wub.UcmTypeID, &wub.UcmLanguageID)
		if err != nil {
			return nil, err
		}

		res = append(res, &wub)
	}

	return res, nil
}

// WsubUcmBasesByUcmTypeID retrieves a row from 'jlabo.wsub_ucm_base' as a WsubUcmBase.
//
// Generated from index 'idx_ucm_type_id'.
func WsubUcmBasesByUcmTypeID(db XODB, ucmTypeID int) ([]*WsubUcmBase, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ucm_id, ucm_item_id, ucm_type_id, ucm_language_id ` +
		`FROM jlabo.wsub_ucm_base ` +
		`WHERE ucm_type_id = ?`

	// run query
	XOLog(sqlstr, ucmTypeID)
	q, err := db.Query(sqlstr, ucmTypeID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubUcmBase{}
	for q.Next() {
		wub := WsubUcmBase{
			_exists: true,
		}

		// scan
		err = q.Scan(&wub.UcmID, &wub.UcmItemID, &wub.UcmTypeID, &wub.UcmLanguageID)
		if err != nil {
			return nil, err
		}

		res = append(res, &wub)
	}

	return res, nil
}

// WsubUcmBaseByUcmID retrieves a row from 'jlabo.wsub_ucm_base' as a WsubUcmBase.
//
// Generated from index 'wsub_ucm_base_ucm_id_pkey'.
func WsubUcmBaseByUcmID(db XODB, ucmID uint) (*WsubUcmBase, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ucm_id, ucm_item_id, ucm_type_id, ucm_language_id ` +
		`FROM jlabo.wsub_ucm_base ` +
		`WHERE ucm_id = ?`

	// run query
	XOLog(sqlstr, ucmID)
	wub := WsubUcmBase{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, ucmID).Scan(&wub.UcmID, &wub.UcmItemID, &wub.UcmTypeID, &wub.UcmLanguageID)
	if err != nil {
		return nil, err
	}

	return &wub, nil
}
