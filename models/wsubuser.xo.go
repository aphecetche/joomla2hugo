// Package toto contains the types for schema 'jlabo'.
package toto

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// WsubUser represents a row from 'jlabo.wsub_users'.
type WsubUser struct {
	ID            int           `json:"id"`            // id
	Name          string        `json:"name"`          // name
	Username      string        `json:"username"`      // username
	Email         string        `json:"email"`         // email
	Password      string        `json:"password"`      // password
	Block         int8          `json:"block"`         // block
	Sendemail     sql.NullInt64 `json:"sendEmail"`     // sendEmail
	Registerdate  time.Time     `json:"registerDate"`  // registerDate
	Lastvisitdate time.Time     `json:"lastvisitDate"` // lastvisitDate
	Activation    string        `json:"activation"`    // activation
	Params        string        `json:"params"`        // params
	Lastresettime time.Time     `json:"lastResetTime"` // lastResetTime
	Resetcount    int           `json:"resetCount"`    // resetCount
	Otpkey        string        `json:"otpKey"`        // otpKey
	Otep          string        `json:"otep"`          // otep
	Requirereset  int8          `json:"requireReset"`  // requireReset

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WsubUser exists in the database.
func (wu *WsubUser) Exists() bool {
	return wu._exists
}

// Deleted provides information if the WsubUser has been deleted from the database.
func (wu *WsubUser) Deleted() bool {
	return wu._deleted
}

// Insert inserts the WsubUser to the database.
func (wu *WsubUser) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wu._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO jlabo.wsub_users (` +
		`name, username, email, password, block, sendEmail, registerDate, lastvisitDate, activation, params, lastResetTime, resetCount, otpKey, otep, requireReset` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wu.Name, wu.Username, wu.Email, wu.Password, wu.Block, wu.Sendemail, wu.Registerdate, wu.Lastvisitdate, wu.Activation, wu.Params, wu.Lastresettime, wu.Resetcount, wu.Otpkey, wu.Otep, wu.Requirereset)
	res, err := db.Exec(sqlstr, wu.Name, wu.Username, wu.Email, wu.Password, wu.Block, wu.Sendemail, wu.Registerdate, wu.Lastvisitdate, wu.Activation, wu.Params, wu.Lastresettime, wu.Resetcount, wu.Otpkey, wu.Otep, wu.Requirereset)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	wu.ID = int(id)
	wu._exists = true

	return nil
}

// Update updates the WsubUser in the database.
func (wu *WsubUser) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wu._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wu._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE jlabo.wsub_users SET ` +
		`name = ?, username = ?, email = ?, password = ?, block = ?, sendEmail = ?, registerDate = ?, lastvisitDate = ?, activation = ?, params = ?, lastResetTime = ?, resetCount = ?, otpKey = ?, otep = ?, requireReset = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, wu.Name, wu.Username, wu.Email, wu.Password, wu.Block, wu.Sendemail, wu.Registerdate, wu.Lastvisitdate, wu.Activation, wu.Params, wu.Lastresettime, wu.Resetcount, wu.Otpkey, wu.Otep, wu.Requirereset, wu.ID)
	_, err = db.Exec(sqlstr, wu.Name, wu.Username, wu.Email, wu.Password, wu.Block, wu.Sendemail, wu.Registerdate, wu.Lastvisitdate, wu.Activation, wu.Params, wu.Lastresettime, wu.Resetcount, wu.Otpkey, wu.Otep, wu.Requirereset, wu.ID)
	return err
}

// Save saves the WsubUser to the database.
func (wu *WsubUser) Save(db XODB) error {
	if wu.Exists() {
		return wu.Update(db)
	}

	return wu.Insert(db)
}

// Delete deletes the WsubUser from the database.
func (wu *WsubUser) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wu._exists {
		return nil
	}

	// if deleted, bail
	if wu._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM jlabo.wsub_users WHERE id = ?`

	// run query
	XOLog(sqlstr, wu.ID)
	_, err = db.Exec(sqlstr, wu.ID)
	if err != nil {
		return err
	}

	// set deleted
	wu._deleted = true

	return nil
}

// WsubUsersByEmail retrieves a row from 'jlabo.wsub_users' as a WsubUser.
//
// Generated from index 'email'.
func WsubUsersByEmail(db XODB, email string) ([]*WsubUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, username, email, password, block, sendEmail, registerDate, lastvisitDate, activation, params, lastResetTime, resetCount, otpKey, otep, requireReset ` +
		`FROM jlabo.wsub_users ` +
		`WHERE email = ?`

	// run query
	XOLog(sqlstr, email)
	q, err := db.Query(sqlstr, email)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubUser{}
	for q.Next() {
		wu := WsubUser{
			_exists: true,
		}

		// scan
		err = q.Scan(&wu.ID, &wu.Name, &wu.Username, &wu.Email, &wu.Password, &wu.Block, &wu.Sendemail, &wu.Registerdate, &wu.Lastvisitdate, &wu.Activation, &wu.Params, &wu.Lastresettime, &wu.Resetcount, &wu.Otpkey, &wu.Otep, &wu.Requirereset)
		if err != nil {
			return nil, err
		}

		res = append(res, &wu)
	}

	return res, nil
}

// WsubUsersByBlock retrieves a row from 'jlabo.wsub_users' as a WsubUser.
//
// Generated from index 'idx_block'.
func WsubUsersByBlock(db XODB, block int8) ([]*WsubUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, username, email, password, block, sendEmail, registerDate, lastvisitDate, activation, params, lastResetTime, resetCount, otpKey, otep, requireReset ` +
		`FROM jlabo.wsub_users ` +
		`WHERE block = ?`

	// run query
	XOLog(sqlstr, block)
	q, err := db.Query(sqlstr, block)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubUser{}
	for q.Next() {
		wu := WsubUser{
			_exists: true,
		}

		// scan
		err = q.Scan(&wu.ID, &wu.Name, &wu.Username, &wu.Email, &wu.Password, &wu.Block, &wu.Sendemail, &wu.Registerdate, &wu.Lastvisitdate, &wu.Activation, &wu.Params, &wu.Lastresettime, &wu.Resetcount, &wu.Otpkey, &wu.Otep, &wu.Requirereset)
		if err != nil {
			return nil, err
		}

		res = append(res, &wu)
	}

	return res, nil
}

// WsubUsersByName retrieves a row from 'jlabo.wsub_users' as a WsubUser.
//
// Generated from index 'idx_name'.
func WsubUsersByName(db XODB, name string) ([]*WsubUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, username, email, password, block, sendEmail, registerDate, lastvisitDate, activation, params, lastResetTime, resetCount, otpKey, otep, requireReset ` +
		`FROM jlabo.wsub_users ` +
		`WHERE name = ?`

	// run query
	XOLog(sqlstr, name)
	q, err := db.Query(sqlstr, name)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubUser{}
	for q.Next() {
		wu := WsubUser{
			_exists: true,
		}

		// scan
		err = q.Scan(&wu.ID, &wu.Name, &wu.Username, &wu.Email, &wu.Password, &wu.Block, &wu.Sendemail, &wu.Registerdate, &wu.Lastvisitdate, &wu.Activation, &wu.Params, &wu.Lastresettime, &wu.Resetcount, &wu.Otpkey, &wu.Otep, &wu.Requirereset)
		if err != nil {
			return nil, err
		}

		res = append(res, &wu)
	}

	return res, nil
}

// WsubUsersByUsername retrieves a row from 'jlabo.wsub_users' as a WsubUser.
//
// Generated from index 'username'.
func WsubUsersByUsername(db XODB, username string) ([]*WsubUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, username, email, password, block, sendEmail, registerDate, lastvisitDate, activation, params, lastResetTime, resetCount, otpKey, otep, requireReset ` +
		`FROM jlabo.wsub_users ` +
		`WHERE username = ?`

	// run query
	XOLog(sqlstr, username)
	q, err := db.Query(sqlstr, username)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WsubUser{}
	for q.Next() {
		wu := WsubUser{
			_exists: true,
		}

		// scan
		err = q.Scan(&wu.ID, &wu.Name, &wu.Username, &wu.Email, &wu.Password, &wu.Block, &wu.Sendemail, &wu.Registerdate, &wu.Lastvisitdate, &wu.Activation, &wu.Params, &wu.Lastresettime, &wu.Resetcount, &wu.Otpkey, &wu.Otep, &wu.Requirereset)
		if err != nil {
			return nil, err
		}

		res = append(res, &wu)
	}

	return res, nil
}

// WsubUserByID retrieves a row from 'jlabo.wsub_users' as a WsubUser.
//
// Generated from index 'wsub_users_id_pkey'.
func WsubUserByID(db XODB, id int) (*WsubUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, username, email, password, block, sendEmail, registerDate, lastvisitDate, activation, params, lastResetTime, resetCount, otpKey, otep, requireReset ` +
		`FROM jlabo.wsub_users ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	wu := WsubUser{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&wu.ID, &wu.Name, &wu.Username, &wu.Email, &wu.Password, &wu.Block, &wu.Sendemail, &wu.Registerdate, &wu.Lastvisitdate, &wu.Activation, &wu.Params, &wu.Lastresettime, &wu.Resetcount, &wu.Otpkey, &wu.Otep, &wu.Requirereset)
	if err != nil {
		return nil, err
	}

	return &wu, nil
}
